// ------------  Paquete e importaciones ------------
package interprete;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import instruccion.Instruccion;
import expresiones.Dato;
import expresiones.Aritmeticas;
import expresiones.TipoDato;
import expresiones.Expresion;
import expresiones.Negativo;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.RecVariable;
import funciones.DecVariables;
import funciones.Println;
import funciones.AsignarVariables;
import funciones.IncDec;
import funciones.If;
import funciones.Else;
import funciones.Match;
import funciones.Casos;
import funciones.While;
import funciones.For;
import funciones.DoWhile;
import funciones.Break;
import funciones.Continue;
import excepciones.Errores;
import expresiones.Casteo;
import funciones.DecArreglos;
import funciones.DecArreglos2D;
import expresiones.AccesoVector;
import expresiones.AccesoArreglo2D;
import funciones.AsigArreglos;
import funciones.AsigArreglos2D;
import funciones.DeclaraLista;
import funciones.AddLista;
import funciones.RemoveElementoLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.Find;
import expresiones.ToString;
import funciones.DecStruct;
import funciones.Campo;
import funciones.CampoStruct;
import funciones.InstStruct;
import funciones.ValorStruct;
import expresiones.AccesoCampoStruct;
import funciones.AsignacionCampoStruct;
import funciones.Metodo;
import instruccion.TipoInstruccion;
import entorno.Tipo;
import java.util.HashMap;
import funciones.StartWith;
import expresiones.Llamada;
import expresiones.Llamada1;
import funciones.Return;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:

        //errores
        public ArrayList<Errores> errores = new ArrayList<>();


        public String resultado = ""; 

        public void syntax_error(Symbol s)
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
                errores.add(new Errores("Error Sintactico", "   \""+ s.value +"\"   "+" Recuperado", s.left, s.right));
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        }

        public ArrayList<Errores> getErrores(){
                return errores;
        }


:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

//tipos de datos
terminal String INT, DOUBLE, BOOL, CHAR, STRING;

//simbolos
terminal String PYC, DOS_P, MAS, MENOS, POR, DIVIDIR, MODULO, IGUALACION, DIFERENCIACION, MENOR_IGUAL, MAYOR_IGUAL, IGUAL, NOT, MENOR_Q, MAYOR_Q;
terminal String OR, AND, XOR, A_PARENTESIS, C_PARENTESIS, A_LLAVE, C_LLAVE, A_CORCHETE, C_CORCHETE, COMA, PUNTO, GUION_BAJO;
terminal String POTENCIA;

//reservadas
terminal String CONSTANTE, VARIABLE, IF, ELSE, MATCH, DEFAULT, WHILE, FOR, DO, BREAK, CONTINUE, RETURN;
terminal String LIST, NEW, APPEND, REMOVE, STRUCT, VOID;

//funciones
terminal String PRINTLN, ROUND, LENGTH, TOSTRING, FIND, START_WITH;

//expresiones
terminal String ENTERO, DECIMAL, BOOLEANO, CADENA, CARACTER, ID;


terminal String UMENOS, UNOT, UCAST;


//------> Declaración de no terminales
non terminal LinkedList<Instruccion> inicio;
non terminal LinkedList<Instruccion> instruccion;
non terminal Instruccion expresiones;
non terminal TipoDato tipoExpresion;
non terminal Instruccion declararVariables;
non terminal Instruccion asignarVariables;
non terminal Instruccion sentIF;
non terminal Instruccion elseIF;
non terminal Instruccion sentMATCH;
non terminal LinkedList<Casos> casos;
non terminal Instruccion caso;
non terminal Instruccion sentWhile;
non terminal Instruccion sentFOR;
non terminal Instruccion updateFOR;
non terminal Instruccion sentDO;
non terminal Instruccion break;
non terminal Instruccion continue;
non terminal Instruccion printConsole;
non terminal Instruccion vector1;
non terminal Instruccion vector2;
non terminal LinkedList<Expresion> listaExpresionesVectores;
non terminal LinkedList<LinkedList<Expresion>> listaExpresionesVectores2;
non terminal Expresion accesoVector;
non terminal Expresion accesoVector2D;
non terminal Instruccion asignacionVector;
non terminal Instruccion decListas;
non terminal Instruccion addLista;
non terminal Expresion removeLista;
non terminal Expresion natRound;
non terminal Expresion natLength;
non terminal Expresion natfind;
non terminal Expresion natToString;
non terminal Instruccion decStructs;
non terminal LinkedList<Campo> listaCampos;
non terminal Campo campoStruct;
non terminal Instruccion instStruct;
non terminal LinkedList<ValorStruct> valoresStruct;
non terminal ValorStruct valorStruct;
non terminal Expresion accesoCampoStruct;
non terminal Instruccion asigStruct;
non terminal Expresion expresion;
non terminal Instruccion metodo;
non terminal TipoDato tipoInstrucciones;
non terminal LinkedList<HashMap> param;
non terminal Instruccion StartWith1;
non terminal LinkedList<Expresion> paramLlamada;
non terminal Instruccion llamada;
non terminal Expresion llamada1;
non terminal Instruccion return;



//-------> Precedencias

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right UNOT;
precedence left IGUALACION, DIFERENCIACION, MENOR_Q, MENOR_IGUAL, MAYOR_Q, MAYOR_IGUAL;
precedence left MAS, MENOS;
precedence left POR, DIVIDIR, MODULO;
precedence nonassoc POTENCIA;
precedence right UCAST;
precedence right UMENOS;


//------> Definir Simbolo Inicial
start with inicio; 

// ------------>  Producciones  <------------

inicio ::= instruccion:val {: RESULT=val; :}
;

instruccion ::= expresiones:a                     {:RESULT = new LinkedList<>(); RESULT.add(a);:}
                | instruccion:a expresiones:b     {:RESULT = a; RESULT.add(b);:}
;

expresiones ::= printConsole:a    {:RESULT=a;:}
        | declararVariables:a     {:RESULT=a;:} 
        | asignarVariables:a      {:RESULT=a;:} 
        | sentIF:a                {:RESULT=a;:}
        | sentMATCH:a             {:RESULT=a;:}
        | sentWhile:a             {:RESULT=a;:}
        | sentFOR:a               {:RESULT=a;:}
        | sentDO:a                {:RESULT=a;:}
        | break:a                 {:RESULT=a;:}
        | continue:a              {:RESULT=a;:}
        | vector1:a               {:RESULT=a;:} 
        | vector2:a               {:RESULT=a;:} 
        | asignacionVector:a      {:RESULT=a;:} 
        | decListas:a             {:RESULT=a;:} 
        | addLista:a              {:RESULT=a;:} 
        | decStructs:a            {:RESULT=a;:} 
        | instStruct:a            {:RESULT=a;:} 
        | asigStruct:a            {:RESULT=a;:} 
        | metodo:a                {:RESULT=a;:}
        | StartWith1:a            {:RESULT=a;:}
        | llamada:a               {:RESULT=a;:}
        | return:a                {:RESULT=a;:} 
        | error PYC               {:RESULT=null;:}
;


return ::= RETURN PYC              {:RESULT = new Return(null, 0, 0);:}
        | RETURN expresion:val PYC {:RESULT = new Return(val, valleft, valright);:}
;

//poner en expresion tambien la llamada;

llamada ::= ID:id A_PARENTESIS paramLlamada:b C_PARENTESIS PYC  {:RESULT = new Llamada(id.toLowerCase(), b, idleft, idright);:}
        | ID:id A_PARENTESIS C_PARENTESIS PYC                   {:RESULT = new Llamada(id.toLowerCase(), new LinkedList<Expresion>(), idleft, idright);:}
;

llamada1 ::= ID:id A_PARENTESIS paramLlamada:b C_PARENTESIS  {:RESULT = new Llamada1(id.toLowerCase(), b, idleft, idright);:}
        | ID:id A_PARENTESIS C_PARENTESIS                    {:RESULT = new Llamada1(id.toLowerCase(), new LinkedList<Expresion>(), idleft, idright);:}
;

//METODO
metodo ::= tipoInstrucciones:tipo ID:id A_PARENTESIS C_PARENTESIS A_LLAVE instruccion:inst C_LLAVE              {:RESULT = new Metodo(id.toLowerCase(), new LinkedList<HashMap>(), inst, tipo, idleft, idright);:}
        | tipoInstrucciones:tipo ID:id A_PARENTESIS param:param C_PARENTESIS A_LLAVE instruccion:inst C_LLAVE   {:RESULT = new Metodo(id.toLowerCase(), param, inst, tipo, idleft, idright);:}
;

param ::=  param:a COMA tipoInstrucciones: tipo ID:id   {:RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id", id); hm2.put("tipo", tipo); RESULT.add(hm2);:}
        | tipoInstrucciones: tipo ID:id                 {:RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>(); hm.put("id", id); hm.put("tipo", tipo); RESULT.add(hm);:}        
;


StartWith1 ::= START_WITH ID:id A_PARENTESIS paramLlamada:b C_PARENTESIS PYC    {:RESULT = new StartWith(id, b, idleft, idright);:}
        | START_WITH ID:id A_PARENTESIS C_PARENTESIS PYC                        {:RESULT = new StartWith(id, new LinkedList<Expresion>() , idleft, idright);:}
;

paramLlamada ::= paramLlamada:a COMA expresion:val      {:RESULT = a; RESULT.add(val);:}
        | expresion:val                                 {:RESULT = new LinkedList<Expresion>(); RESULT.add(val);:}
;

tipoInstrucciones ::= VOID:val {:RESULT=TipoDato.VOID;:}
        | INT:val              {:RESULT=TipoDato.INT;:}
        | DOUBLE:val           {:RESULT=TipoDato.DOUBLE;:}
        | BOOL:val             {:RESULT=TipoDato.BOOLEAN;:}
        | CHAR:val             {:RESULT=TipoDato.CHAR;:}
        | STRING:val           {:RESULT=TipoDato.CADENA;:}
;


//Tipos de datos
tipoExpresion ::= INT:val     {:RESULT=TipoDato.INT;:}
        | DOUBLE:val          {:RESULT=TipoDato.DOUBLE;:}
        | BOOL:val            {:RESULT=TipoDato.BOOLEAN;:}
        | CHAR:val            {:RESULT=TipoDato.CHAR;:}
        | STRING:val          {:RESULT=TipoDato.CADENA;:}
;


//Declarar variables, tambien incluyo los casteos en este no terminal 
declararVariables ::= VARIABLE:mut ID:id DOS_P tipoExpresion:tipo PYC                   {:RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null, tipoleft, tiporight);:}
                | CONSTANTE:mut ID:id DOS_P tipoExpresion:tipo PYC                      {:RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null,tipoleft, tiporight);:}
                | VARIABLE:mut ID:id DOS_P tipoExpresion:tipo IGUAL expresion:exp PYC   {:RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);:}
                | CONSTANTE:mut ID:id DOS_P tipoExpresion:tipo IGUAL expresion:exp PYC  {:RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);:}

                | VARIABLE:mut ID:id DOS_P tipoExpresion:tipo IGUAL A_PARENTESIS tipoExpresion:tipo2 C_PARENTESIS expresion:exp PYC     {:RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);:}
                | CONSTANTE:mut ID:id DOS_P tipoExpresion:tipo IGUAL A_PARENTESIS tipoExpresion:tipo2 C_PARENTESIS expresion:exp PYC    {:RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);:}                
;


//asignar variables, tambien casteos sin forma de declarar
asignarVariables ::= ID:id IGUAL expresion:exp PYC              {:RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);:}
                | ID:id MAS MAS PYC                             {:RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);:}
                | ID:id MENOS MENOS PYC                         {:RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);:}
;


//Sentencia de control

        //Sentencia if
sentIF ::= IF A_PARENTESIS expresion:exp C_PARENTESIS A_LLAVE instruccion:inst C_LLAVE                  {:RESULT = new If(exp, inst, null, expleft, expright);:}
        | IF A_PARENTESIS expresion:exp C_PARENTESIS A_LLAVE instruccion:inst C_LLAVE elseIF:elseIf     {:RESULT = new If(exp, inst, elseIf, expleft, expright);;:}
;

        //else y else if
elseIF ::= ELSE A_LLAVE instruccion:inst C_LLAVE        {:RESULT= new Else(inst, instleft, instright);:}
        | ELSE sentIF:a                                 {:RESULT=a;:}
;


        //Sentencia MATCH
sentMATCH ::= MATCH expresion:exp A_LLAVE  casos:c  C_LLAVE     {:RESULT = new Match(exp, c, expleft, expright);:}
;

casos::= caso:a                 {:RESULT= new LinkedList<>(); RESULT.add((Casos)a);:}
        | casos:b caso:a        {:RESULT = b; RESULT.add((Casos)a);:}
;

caso ::=  expresion:exp IGUAL MAYOR_Q A_LLAVE instruccion:inst C_LLAVE         {:RESULT = new Casos(exp, inst, expleft, expright);:}
        | GUION_BAJO IGUAL MAYOR_Q A_LLAVE instruccion:inst C_LLAVE            {:RESULT = new Casos(new Dato("_", TipoDato.CADENA, instleft, instright), inst, instleft, instright);:}
;


//Sentencia ciclicas

        //while
sentWhile ::= WHILE A_PARENTESIS expresion:exp C_PARENTESIS A_LLAVE instruccion:inst C_LLAVE            {:RESULT =  new While(exp, inst, expleft, expright);:}
;

        //FOR
sentFOR ::= FOR A_PARENTESIS asignarVariables:a expresion:exp PYC updateFOR:b C_PARENTESIS A_LLAVE instruccion:inst C_LLAVE {:RESULT= new For(a, exp, b, inst,aleft, aright);:}
;

updateFOR ::= ID:id IGUAL expresion:exp     {:RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);:}
        | ID:id MAS MAS                     {:RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);:}
        | ID:id MENOS MENOS                 {:RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);:}
;

        // DO-WHILE
sentDO ::= DO A_LLAVE instruccion:inst C_LLAVE WHILE A_PARENTESIS expresion:exp C_PARENTESIS PYC        {:RESULT = new DoWhile(exp, inst, instleft, instright);:}
;

//sentencias de transferencia

        //beak
break ::= BREAK:a PYC {:RESULT = new Break(aleft, aright);:}
;
        //continue
continue ::= CONTINUE:a PYC {:RESULT = new Continue(aleft, aright);:}
;


//imprimir en consola
printConsole ::= PRINTLN A_PARENTESIS expresion:val C_PARENTESIS PYC {:RESULT= new Println(val, valleft, valright);:}
;


//VECTORES
vector1 ::= VARIABLE ID:id DOS_P tipoExpresion:tipo A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores:exp C_CORCHETE PYC  {:RESULT=new DecArreglos(id, tipo, exp, idleft, idright);:}
        | CONSTANTE ID:id DOS_P tipoExpresion:tipo A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores:exp C_CORCHETE PYC   {:RESULT=new DecArreglos(id, tipo, exp, idleft, idright);:}
;

vector2 ::= VARIABLE ID:id DOS_P tipoExpresion:tipo A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2:exp C_CORCHETE PYC   {:RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);:}
        | CONSTANTE ID:id DOS_P tipoExpresion:tipo A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2:exp C_CORCHETE PYC    {:RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);:}
;

listaExpresionesVectores ::= expresion:val              {:RESULT = new LinkedList<>(); RESULT.add(val);:}
        | listaExpresionesVectores:a COMA expresion:val {:RESULT = a; RESULT.add(val);:}
;

listaExpresionesVectores2 ::= A_CORCHETE listaExpresionesVectores:val C_CORCHETE                {:RESULT = new LinkedList<>(); RESULT.add(val);:}
        | listaExpresionesVectores2:a COMA A_CORCHETE listaExpresionesVectores:val C_CORCHETE   {:RESULT = a; RESULT.add(val);:}
;

accesoVector ::= ID:id A_CORCHETE expresion:indice C_CORCHETE      {:RESULT = new AccesoVector(id.toLowerCase(), indice, idleft, idright);:}
;

accesoVector2D ::= ID:id A_CORCHETE expresion:indice1 C_CORCHETE A_CORCHETE expresion:indice2 C_CORCHETE   {:RESULT = new AccesoArreglo2D(id.toLowerCase(), indice1, indice2, idleft, idright);:}
;


asignacionVector ::= ID:id A_CORCHETE expresion:indice C_CORCHETE IGUAL expresion:val  PYC                                {:RESULT=new AsigArreglos(id.toLowerCase(), indice, val, idleft, idright);:}
        | ID:id A_CORCHETE expresion:indice1 C_CORCHETE A_CORCHETE expresion:indice2 C_CORCHETE IGUAL expresion:val PYC   {:RESULT=new AsigArreglos2D(id.toLowerCase(), indice1, indice2, val, idleft, idright);:}
;


//Listas Dinámicas 
decListas ::= LIST MENOR_Q tipoExpresion:tipo MAYOR_Q ID:id IGUAL NEW LIST A_PARENTESIS C_PARENTESIS PYC {:RESULT = new DeclaraLista(tipo, id.toLowerCase(), idleft, idright);:}
;

addLista ::= ID: id PUNTO APPEND A_PARENTESIS expresion:val C_PARENTESIS PYC {:RESULT = new AddLista(id.toLowerCase(), val, idleft, idright);:}
;

removeLista ::= ID: id PUNTO REMOVE A_PARENTESIS expresion:val C_PARENTESIS {:RESULT = new RemoveElementoLista(id.toLowerCase(), val, idleft, idright);:}
;



//Structs
decStructs ::= STRUCT A_LLAVE listaCampos:campos C_LLAVE ID:id PYC {:RESULT = new DecStruct(id.toLowerCase(), campos, idleft, idright);:}
;

listaCampos ::= listaCampos:b campoStruct:a     {:RESULT = b; RESULT.add(a);:}
        | campoStruct:a                         {:RESULT = new LinkedList<>(); RESULT.add(a);:}
;

campoStruct ::= ID:id DOS_P tipoExpresion:tipo PYC      {:RESULT = new Campo(tipo, id.toLowerCase(), idleft, idright);:}
        | ID:id DOS_P ID:idStruct2 PYC                {:RESULT = new CampoStruct(idStruct2.toLowerCase(), id.toLowerCase(), idleft, idright);:}
;

        //Instancia struct
instStruct ::= VARIABLE ID:id DOS_P ID:structId IGUAL A_LLAVE valoresStruct:valores C_LLAVE PYC     {:RESULT = new InstStruct("var", id.toLowerCase(), structId.toLowerCase(), valores, idleft, idright);:}
        | CONSTANTE ID:id DOS_P ID:structId IGUAL A_LLAVE valoresStruct:valores C_LLAVE  PYC        {:RESULT = new InstStruct("const", id.toLowerCase(), structId.toLowerCase(), valores, idleft, idright);:}
;

valoresStruct ::= valoresStruct:b COMA valorStruct: a   {:RESULT = b; RESULT.add(a);:}
        | valorStruct:a                                 {:RESULT = new LinkedList<>(); RESULT.add(a);:}
;

valorStruct ::= ID:id DOS_P expresion:val {:RESULT = new ValorStruct(id.toLowerCase(), val, idleft, idright);:}
;

        //Acceso a campos struct
accesoCampoStruct ::= ID:id PUNTO ID:campo {:RESULT = new AccesoCampoStruct(id.toLowerCase(), campo.toLowerCase(), idleft, idright);:}
;

        //Asignacion de struct
asigStruct ::= ID:id PUNTO ID:campo IGUAL expresion:exp PYC {:RESULT = new AsignacionCampoStruct(id.toLowerCase(), campo.toLowerCase(), exp, idleft, idright);:}
;



//NATIVAS
natRound ::= ROUND A_PARENTESIS expresion:val C_PARENTESIS              {:RESULT = new Round(val, valleft, valright);:}
;

natLength ::= LENGTH A_PARENTESIS expresion:val C_PARENTESIS            {:RESULT = new Length(val, valleft, valright);:}
;

natToString ::= TOSTRING A_PARENTESIS expresion:val C_PARENTESIS        {:RESULT = new ToString(val, valleft, valright);:}
;

natfind ::= ID:id PUNTO FIND A_PARENTESIS expresion:val C_PARENTESIS    {:RESULT = new Find(id.toLowerCase(), val, idleft, idright);:}
;


//expresiones 
expresion::= MENOS expresion: val                       {:RESULT = new Aritmeticas(val, "-", null, valleft,valright);:}%prec UMENOS
        | expresion:val1 POTENCIA  expresion:val2       {:RESULT = new Aritmeticas(val1, "**", val2, val2left,val2right);:}
        | expresion:val1 POR expresion:val2             {:RESULT = new Aritmeticas(val1, "*", val2, val2left,val2right);:}
        | expresion:val1 DIVIDIR expresion:val2         {:RESULT = new Aritmeticas(val1, "/", val2, val2left,val2right);:}
        | expresion:val1 MODULO expresion:val2          {:RESULT = new Aritmeticas(val1, "%", val2, val2left,val2right);:}
        | expresion:val1 MAS expresion:val2             {:RESULT = new Aritmeticas(val1, "+", val2, val2left,val2right);:}
        | expresion:val1 MENOS expresion:val2           {:RESULT = new Aritmeticas(val1, "-", val2, val2left,val2right);:}
        | expresion:val1 IGUALACION expresion:val2      {:RESULT = new Relacionales(val1, val2, "==", val2left, val2right);:}
        | expresion:val1 DIFERENCIACION expresion:val2  {:RESULT = new Relacionales(val1, val2, "!=", val2left, val2right);:}
        | expresion:val1 MENOR_Q expresion:val2         {:RESULT = new Relacionales(val1, val2, "<", val2left, val2right);:}
        | expresion:val1 MENOR_IGUAL expresion:val2     {:RESULT = new Relacionales(val1, val2, "<=", val2left, val2right);:}
        | expresion:val1 MAYOR_Q expresion:val2         {:RESULT = new Relacionales(val1, val2, ">", val2left, val2right);:}
        | expresion:val1 MAYOR_IGUAL expresion:val2     {:RESULT = new Relacionales(val1, val2, ">=", val2left, val2right);:}
        | NOT expresion :val                            {:RESULT = new Logicos(val, null, "!", valleft, valright);:}%prec UNOT
        | expresion:val1 XOR expresion:val2             {:RESULT = new Logicos(val1, val2, "^", val2left, val2right);:}
        | expresion:val1 OR expresion:val2              {:RESULT = new Logicos(val1, val2, "||", val2left, val2right);:}
        | expresion:val1 AND expresion:val2             {:RESULT = new Logicos(val1, val2, "&&", val2left, val2right);:}
        | A_PARENTESIS expresion:val C_PARENTESIS       {:RESULT = val;:}
        | ENTERO:val                                    {:RESULT = new Dato(val, TipoDato.INT, valleft, valright);:}
        | DECIMAL:val                                   {:RESULT = new Dato(val, TipoDato.DOUBLE, valleft, valright);:} 
        | BOOLEANO:val                                  {:RESULT = new Dato(val, TipoDato.BOOLEAN, valleft, valright);:}
        | CADENA:val                                    {:RESULT = new Dato(val, TipoDato.CADENA, valleft, valright);:}
        | CARACTER:val                                  {:RESULT = new Dato(val, TipoDato.CHAR, valleft, valright);:}
        | ID:id                                         {:RESULT = new RecVariable(id.toLowerCase(), idleft, idright);:}
        | A_PARENTESIS tipoExpresion:tipo C_PARENTESIS expresion:exp {:RESULT = new Casteo(exp, tipo, expleft, expright);:} %prec UCAST
        | accesoVector:a                                {:RESULT=a;:}
        | accesoVector2D:a                              {:RESULT=a;:}
        | removeLista:a                                 {:RESULT=a;:}
        | natRound:a                                    {:RESULT=a;:}
        | natLength:a                                   {:RESULT=a;:}
        | natfind:a                                     {:RESULT=a;:}
        | natToString:a                                 {:RESULT=a;:}
        | accesoCampoStruct:a                           {:RESULT=a;:}
        | llamada1:a                                    {:RESULT=a;:}
;