START_WITH main();

var var1: int = 0;

const arreglo2: int[] = [0, 0, 1, 2, 0, 0, 5, 1, 0, 0, 8, 0, 0];

Struct{
    nombre: string;
    edad: int;
    estatura: double;
} persona;

var global: int = 10;

void main(){
    println("Archivo de prueba");
    println("Si sale compi1");

    var var1: int = 10;

    if (var1 == 0) {
        println("Manejo de ambitos erroneo :'(");
    } else {
        println("Manejo de ambitos correcto");
    }

    // tabla de multiplicar
    tablaMultiplicar(5);

    // recursividad
    recursividadBasica();

    // arreglos
    AnalizarArreglo();

    //ackermann
    var m : int = 1;
    var n : int = 2;
    println("");
    println("Ackermann(" + m + ", " + n + ") = " + ackermann(m, n));
    println("");
    //hanoi
    var numDiscos : int = 4;
    hanoi(numDiscos, 'A', 'C', 'B');

    //fibonacci
    var f : int = 10;
    var i : int = 10;
   println("");
    println("Secuencia de Fibonacci hasta el término " + f + ":");
    for (i = 0; i < f; i++) {
        println(fibonacci(i));
    }
    println("");

    var sum: int = suma(1, global); //debe almacenar 11
    println("El resultado de la suma es: " + sum);
    println("");
    miMetodo();


    println("Fin de la prueba");
}


void miMetodo(){
    //aqui vamos a tener los structs
    var p1: persona = { nombre: "Luis", edad: 20, estatura: 1.60 };
    const p2: persona = { nombre: "Maria", edad: 25, estatura: 1.50 };

    println("La persona " + p1.nombre + " tiene " + p1.edad + " años");
    println("La persona " + p2.nombre + " tiene " + p2.edad + " años");
}

int suma(int a, int b){
    return a + b;
}

void tablaMultiplicar(int valor){
    const cadenaSalida: string = "Final de la tabla de multiplicar";
    var i: int = 0;
    for (i = 1; i < 11; i++) {
        println(valor + " x " + i + " = " + valor * i);
        if (i == 10) {
            println(cadenaSalida);
            break;
        }
    }
}

// probando una funcion recursiva
double mcd(double a, double b){
    if (b == 0.0) {
        return a;
    } else {
        return mcd(b, a % b);
    }
}

void recursividadBasica(){
    const resultado: double = mcd(48.0, 18.0);

    if (resultado == 6) {
        println("Funcion recursiva correcta");
        return;
    }
    println("Funcion recursiva incorrecta");
}

// viendo arreglos
void AnalizarArreglo(){
    var temporal: int = 0;
    var suma: int = 0;
    var ceros: int = 0;
    var i: int = 0;
    for (i = 0; i < length(arreglo2); i++) {
        temporal = arreglo2[i];
        if (temporal == 0) {
            ceros = ceros + 1;
            continue;
        }
        suma = suma + temporal;
    }
    println("La suma de los elementos del arreglo es: " + suma);
    println("La cantidad de ceros en el arreglo es: " + ceros);
}

int Ackermann(int m, int n){
    if (m == 0) {
      return n + 1;
    } else if (m > 0 && n == 0) {
      return ackermann(m - 1, 1);
    } else if (m > 0 && n > 0) {
      return ackermann(m - 1, ackermann(m, n - 1));
    } else {
      println("Los valores de m y n deben ser no negativos.");
    }
}

void hanoi(int n, char fromPole, char toPole, char auxPole){
   if (n == 1) {
      println("Mover disco 1 de " + fromPole + " a " + toPole);
      return;
   }
   
   hanoi(n - 1, fromPole, auxPole, toPole);
   println("Mover disco " + n + " de " + fromPole + " a " + toPole);
   hanoi(n - 1, auxPole, toPole, fromPole);
}

int fibonacci(int n){
  // Casos base: F(0) = 0, F(1) = 1
  if (n == 0) {
     return 0;
  } else if (n == 1) {
     return 1;
  } else {
     // Llamada recursiva: F(n) = F(n-1) + F(n-2)
     return fibonacci(n - 1) + fibonacci(n - 2);
  }
}


Struct{
    cui: string;
    p: persona;
} identificacion;


/*
SALIDA


Archivo de prueba
Si sale compi1
Manejo de ambitos correcto
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50
Final de la tabla de multiplicar
Funcion recursiva correcta
La suma de los elementos del arreglo es: 17
La cantidad de ceros en el arreglo es: 8

Ackermann(1, 2) = 4

Mover disco 1 de A a B
Mover disco 2 de A a C
Mover disco 1 de B a C
Mover disco 3 de A a B
Mover disco 1 de C a A
Mover disco 2 de C a B
Mover disco 1 de A a B
Mover disco 4 de A a C
Mover disco 1 de B a C
Mover disco 2 de B a A
Mover disco 1 de C a A
Mover disco 3 de B a C
Mover disco 1 de A a B
Mover disco 2 de A a C
Mover disco 1 de B a C

Secuencia de Fibonacci hasta el término 10:
0
1
1
2
3
5
8
13
21
34

El resultado de la suma es: 11

La persona Luis tiene 20 años
La persona Maria tiene 25 años

Fin de la prueba


*/