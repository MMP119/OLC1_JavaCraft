
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package interprete;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import instruccion.Instruccion;
import expresiones.Dato;
import expresiones.Aritmeticas;
import expresiones.TipoDato;
import expresiones.Expresion;
import expresiones.Negativo;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.RecVariable;
import funciones.DecVariables;
import funciones.Println;
import funciones.AsignarVariables;
import funciones.IncDec;
import funciones.If;
import funciones.Else;
import funciones.Match;
import funciones.Casos;
import funciones.While;
import funciones.For;
import funciones.DoWhile;
import funciones.Break;
import funciones.Continue;
import excepciones.Errores;
import expresiones.Casteo;
import funciones.DecArreglos;
import funciones.DecArreglos2D;
import expresiones.AccesoVector;
import expresiones.AccesoArreglo2D;
import funciones.AsigArreglos;
import funciones.AsigArreglos2D;
import funciones.DeclaraLista;
import funciones.AddLista;
import funciones.RemoveElementoLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.Find;
import expresiones.ToString;
import funciones.DecStruct;
import funciones.Campo;
import funciones.CampoStruct;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\007\000\002\006\007\000\002\006" +
    "\011\000\002\006\011\000\002\006\014\000\002\006\014" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\010\011\000\002\010\012\000\002\011\006\000\002" +
    "\011\004\000\002\012\007\000\002\013\003\000\002\013" +
    "\004\000\002\014\010\000\002\014\010\000\002\015\011" +
    "\000\002\016\014\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\020\013\000\002\021\004\000\002" +
    "\022\004\000\002\023\007\000\002\024\015\000\002\024" +
    "\015\000\002\025\017\000\002\025\017\000\002\026\003" +
    "\000\002\026\005\000\002\027\005\000\002\027\007\000" +
    "\002\030\006\000\002\031\011\000\002\032\011\000\002" +
    "\032\014\000\002\033\015\000\002\035\011\000\002\036" +
    "\010\000\002\044\010\000\002\045\004\000\002\045\003" +
    "\000\002\046\006\000\002\046\006\000\002\040\006\000" +
    "\002\041\006\000\002\043\006\000\002\042\010\000\002" +
    "\047\004\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\004\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\006\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\036\003\037\045\030\046\021\047\022\051" +
    "\043\053\013\054\041\055\025\056\035\057\007\061\012" +
    "\065\010\067\034\102\024\001\002\000\042\002\ufff4\003" +
    "\ufff4\036\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\061\ufff4\065\ufff4\067" +
    "\ufff4\102\ufff4\001\002\000\042\002\uffff\003\uffff\036\uffff" +
    "\045\uffff\046\uffff\047\uffff\051\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\061\uffff\065\uffff\067\uffff\102\uffff" +
    "\001\002\000\042\002\ufff5\003\ufff5\036\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\061\ufff5\065\ufff5\067\ufff5\102\ufff5\001\002\000" +
    "\004\011\u012f\001\002\000\004\035\u0122\001\002\000\042" +
    "\002\ufffd\003\ufffd\036\ufffd\045\ufffd\046\ufffd\047\ufffd\051" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\061\ufffd" +
    "\065\ufffd\067\ufffd\102\ufffd\001\002\000\004\026\u0118\001" +
    "\002\000\004\033\u0112\001\002\000\042\002\ufff8\003\ufff8" +
    "\036\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\061\ufff8\065\ufff8\067\ufff8" +
    "\102\ufff8\001\002\000\042\002\uffee\003\uffee\036\uffee\045" +
    "\uffee\046\uffee\047\uffee\051\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\061\uffee\065\uffee\067\uffee\102\uffee\001" +
    "\002\000\042\002\ufff0\003\ufff0\036\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\051\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\061\ufff0\065\ufff0\067\ufff0\102\ufff0\001\002\000\040" +
    "\002\000\003\037\045\030\046\021\047\022\051\043\053" +
    "\013\054\041\055\025\056\035\057\007\061\012\065\010" +
    "\067\034\102\024\001\002\000\042\002\ufff9\003\ufff9\036" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\061\ufff9\065\ufff9\067\ufff9\102" +
    "\ufff9\001\002\000\004\102\370\001\002\000\004\033\354" +
    "\001\002\000\042\002\ufffa\003\ufffa\036\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\061\ufffa\065\ufffa\067\ufffa\102\ufffa\001\002\000" +
    "\014\013\236\014\240\024\237\037\333\042\332\001\002" +
    "\000\004\035\322\001\002\000\042\002\ufff6\003\ufff6\036" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\061\ufff6\065\ufff6\067\ufff6\102" +
    "\ufff6\001\002\000\042\002\ufff7\003\ufff7\036\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\061\ufff7\065\ufff7\067\ufff7\102\ufff7\001\002" +
    "\000\004\102\256\001\002\000\042\002\uffef\003\uffef\036" +
    "\uffef\045\uffef\046\uffef\047\uffef\051\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\061\uffef\065\uffef\067\uffef\102" +
    "\uffef\001\002\000\004\002\255\001\002\000\042\002\ufffc" +
    "\003\ufffc\036\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc\065\ufffc" +
    "\067\ufffc\102\ufffc\001\002\000\004\033\251\001\002\000" +
    "\004\011\250\001\002\000\042\002\ufff1\003\ufff1\036\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\051\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\061\ufff1\065\ufff1\067\ufff1\102\ufff1" +
    "\001\002\000\004\011\247\001\002\000\042\002\ufff2\003" +
    "\ufff2\036\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\061\ufff2\065\ufff2\067" +
    "\ufff2\102\ufff2\001\002\000\004\033\215\001\002\000\042" +
    "\002\uffed\003\uffed\036\uffed\045\uffed\046\uffed\047\uffed\051" +
    "\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\061\uffed" +
    "\065\uffed\067\uffed\102\uffed\001\002\000\032\014\045\025" +
    "\052\033\066\070\063\071\065\072\056\075\070\076\050" +
    "\077\055\100\046\101\062\102\054\001\002\000\042\002" +
    "\ufffb\003\ufffb\036\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\061\ufffb\065" +
    "\ufffb\067\ufffb\102\ufffb\001\002\000\032\014\045\025\052" +
    "\033\066\070\063\071\065\072\056\075\070\076\050\077" +
    "\055\100\046\101\062\102\054\001\002\000\054\011\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f\044" +
    "\uff9f\001\002\000\054\011\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b" +
    "\035\uff9b\040\uff9b\041\uff9b\044\uff9b\001\002\000\054\011" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1" +
    "\044\uffa1\001\002\000\042\013\112\014\105\015\110\016" +
    "\113\017\114\020\116\021\106\022\120\023\107\026\115" +
    "\027\111\030\117\031\102\032\103\035\172\044\104\001" +
    "\002\000\032\014\045\025\052\033\066\070\063\071\065" +
    "\072\056\075\070\076\050\077\055\100\046\101\062\102" +
    "\054\001\002\000\054\011\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\034\uff99" +
    "\035\uff99\040\uff99\041\uff99\044\uff99\001\002\000\060\011" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\034\uff9d\035\uff9d\037\153\040\uff9d" +
    "\041\uff9d\042\152\044\uff9d\001\002\000\054\011\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\034\uffa0\035\uffa0\040\uffa0\041\uffa0\044\uffa0" +
    "\001\002\000\004\033\147\001\002\000\054\011\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\034\uff96\035\uff96\040\uff96\041\uff96\044\uff96" +
    "\001\002\000\054\011\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a\035" +
    "\uff9a\040\uff9a\041\uff9a\044\uff9a\001\002\000\054\011\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\026\uff97\027\uff97\030\uff97" +
    "\031\uff97\032\uff97\034\uff97\035\uff97\040\uff97\041\uff97\044" +
    "\uff97\001\002\000\054\011\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e" +
    "\035\uff9e\040\uff9e\041\uff9e\044\uff9e\001\002\000\004\033" +
    "\144\001\002\000\054\011\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\034\uff98" +
    "\035\uff98\040\uff98\041\uff98\044\uff98\001\002\000\004\033" +
    "\141\001\002\000\044\004\071\005\077\006\076\007\072" +
    "\010\075\014\045\025\052\033\066\070\063\071\065\072" +
    "\056\075\070\076\050\077\055\100\046\101\062\102\054" +
    "\001\002\000\054\011\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034\uff95\035" +
    "\uff95\040\uff95\041\uff95\044\uff95\001\002\000\054\011\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\034\uffa2\035\uffa2\040\uffa2\041\uffa2\044" +
    "\uffa2\001\002\000\014\011\uffec\024\uffec\027\uffec\034\uffec" +
    "\037\uffec\001\002\000\014\011\uffe9\024\uffe9\027\uffe9\034" +
    "\uffe9\037\uffe9\001\002\000\042\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\026" +
    "\115\027\111\030\117\031\102\032\103\034\140\044\104" +
    "\001\002\000\004\034\100\001\002\000\014\011\uffe8\024" +
    "\uffe8\027\uffe8\034\uffe8\037\uffe8\001\002\000\014\011\uffea" +
    "\024\uffea\027\uffea\034\uffea\037\uffea\001\002\000\014\011" +
    "\uffeb\024\uffeb\027\uffeb\034\uffeb\037\uffeb\001\002\000\032" +
    "\014\045\025\052\033\066\070\063\071\065\072\056\075" +
    "\070\076\050\077\055\100\046\101\062\102\054\001\002" +
    "\000\054\011\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c\035\uff9c\040" +
    "\uff9c\041\uff9c\044\uff9c\001\002\000\032\014\045\025\052" +
    "\033\066\070\063\071\065\072\056\075\070\076\050\077" +
    "\055\100\046\101\062\102\054\001\002\000\032\014\045" +
    "\025\052\033\066\070\063\071\065\072\056\075\070\076" +
    "\050\077\055\100\046\101\062\102\054\001\002\000\032" +
    "\014\045\025\052\033\066\070\063\071\065\072\056\075" +
    "\070\076\050\077\055\100\046\101\062\102\054\001\002" +
    "\000\032\014\045\025\052\033\066\070\063\071\065\072" +
    "\056\075\070\076\050\077\055\100\046\101\062\102\054" +
    "\001\002\000\032\014\045\025\052\033\066\070\063\071" +
    "\065\072\056\075\070\076\050\077\055\100\046\101\062" +
    "\102\054\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\032\014\045\025\052\033" +
    "\066\070\063\071\065\072\056\075\070\076\050\077\055" +
    "\100\046\101\062\102\054\001\002\000\032\014\045\025" +
    "\052\033\066\070\063\071\065\072\056\075\070\076\050" +
    "\077\055\100\046\101\062\102\054\001\002\000\032\014" +
    "\045\025\052\033\066\070\063\071\065\072\056\075\070" +
    "\076\050\077\055\100\046\101\062\102\054\001\002\000" +
    "\032\014\045\025\052\033\066\070\063\071\065\072\056" +
    "\075\070\076\050\077\055\100\046\101\062\102\054\001" +
    "\002\000\032\014\045\025\052\033\066\070\063\071\065" +
    "\072\056\075\070\076\050\077\055\100\046\101\062\102" +
    "\054\001\002\000\032\014\045\025\052\033\066\070\063" +
    "\071\065\072\056\075\070\076\050\077\055\100\046\101" +
    "\062\102\054\001\002\000\032\014\045\025\052\033\066" +
    "\070\063\071\065\072\056\075\070\076\050\077\055\100" +
    "\046\101\062\102\054\001\002\000\032\014\045\025\052" +
    "\033\066\070\063\071\065\072\056\075\070\076\050\077" +
    "\055\100\046\101\062\102\054\001\002\000\032\014\045" +
    "\025\052\033\066\070\063\071\065\072\056\075\070\076" +
    "\050\077\055\100\046\101\062\102\054\001\002\000\054" +
    "\011\uffaa\013\112\014\105\015\110\016\113\017\114\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa\040\uffaa\041" +
    "\uffaa\044\104\001\002\000\054\011\uffa5\013\112\014\105" +
    "\015\110\016\113\017\114\020\116\021\106\022\120\023" +
    "\107\024\uffa5\026\115\027\111\030\uffa5\031\102\032\103" +
    "\034\uffa5\035\uffa5\040\uffa5\041\uffa5\044\104\001\002\000" +
    "\054\011\uffad\013\112\014\105\015\110\016\113\017\114" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\040\uffad" +
    "\041\uffad\044\104\001\002\000\054\011\uffab\013\112\014" +
    "\105\015\110\016\113\017\114\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\034\uffab\035\uffab\040\uffab\041\uffab\044\104\001\002" +
    "\000\054\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\040" +
    "\uffb0\041\uffb0\044\104\001\002\000\054\011\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\034\uffb1\035\uffb1\040\uffb1\041\uffb1\044\104\001" +
    "\002\000\054\011\uffaf\013\uffaf\014\uffaf\015\110\016\113" +
    "\017\114\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf" +
    "\040\uffaf\041\uffaf\044\104\001\002\000\054\011\uffa9\013" +
    "\112\014\105\015\110\016\113\017\114\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\034\uffa9\035\uffa9\040\uffa9\041\uffa9\044\104" +
    "\001\002\000\054\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035" +
    "\uffb2\040\uffb2\041\uffb2\044\104\001\002\000\054\011\uffa8" +
    "\013\112\014\105\015\110\016\113\017\114\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\034\uffa8\035\uffa8\040\uffa8\041\uffa8\044" +
    "\104\001\002\000\054\011\uffac\013\112\014\105\015\110" +
    "\016\113\017\114\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034\uffac" +
    "\035\uffac\040\uffac\041\uffac\044\104\001\002\000\054\011" +
    "\uffae\013\uffae\014\uffae\015\110\016\113\017\114\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\034\uffae\035\uffae\040\uffae\041\uffae" +
    "\044\104\001\002\000\052\011\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\034" +
    "\uffb3\035\uffb3\040\uffb3\041\uffb3\001\002\000\054\011\uffa6" +
    "\013\112\014\105\015\110\016\113\017\114\020\116\021" +
    "\106\022\120\023\107\024\uffa6\026\115\027\111\030\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\035\uffa6\040\uffa6\041\uffa6\044" +
    "\104\001\002\000\054\011\uffa4\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\024" +
    "\uffa4\026\115\027\111\030\uffa4\031\uffa4\032\103\034\uffa4" +
    "\035\uffa4\040\uffa4\041\uffa4\044\104\001\002\000\054\011" +
    "\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3\040\uffa3\041\uffa3" +
    "\044\uffa3\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\042\013\112\014\105\015" +
    "\110\016\113\017\114\020\116\021\106\022\120\023\107" +
    "\026\115\027\111\030\117\031\102\032\103\034\143\044" +
    "\104\001\002\000\054\011\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7" +
    "\035\uffb7\040\uffb7\041\uffb7\044\uffb7\001\002\000\032\014" +
    "\045\025\052\033\066\070\063\071\065\072\056\075\070" +
    "\076\050\077\055\100\046\101\062\102\054\001\002\000" +
    "\042\013\112\014\105\015\110\016\113\017\114\020\116" +
    "\021\106\022\120\023\107\026\115\027\111\030\117\031" +
    "\102\032\103\034\146\044\104\001\002\000\054\011\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\044" +
    "\uffb8\001\002\000\032\014\045\025\052\033\066\070\063" +
    "\071\065\072\056\075\070\076\050\077\055\100\046\101" +
    "\062\102\054\001\002\000\042\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\026" +
    "\115\027\111\030\117\031\102\032\103\034\151\044\104" +
    "\001\002\000\054\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\035" +
    "\uffb6\040\uffb6\041\uffb6\044\uffb6\001\002\000\006\064\162" +
    "\073\161\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\042\013\112\014\105\015" +
    "\110\016\113\017\114\020\116\021\106\022\120\023\107" +
    "\026\115\027\111\030\117\031\102\032\103\040\155\044" +
    "\104\001\002\000\056\011\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4" +
    "\035\uffc4\037\156\040\uffc4\041\uffc4\044\uffc4\001\002\000" +
    "\032\014\045\025\052\033\066\070\063\071\065\072\056" +
    "\075\070\076\050\077\055\100\046\101\062\102\054\001" +
    "\002\000\042\013\112\014\105\015\110\016\113\017\114" +
    "\020\116\021\106\022\120\023\107\026\115\027\111\030" +
    "\117\031\102\032\103\040\160\044\104\001\002\000\054" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\040\uffc3\041" +
    "\uffc3\044\uffc3\001\002\000\004\033\166\001\002\000\004" +
    "\033\163\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\042\013\112\014\105\015" +
    "\110\016\113\017\114\020\116\021\106\022\120\023\107" +
    "\026\115\027\111\030\117\031\102\032\103\034\165\044" +
    "\104\001\002\000\054\011\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe" +
    "\035\uffbe\040\uffbe\041\uffbe\044\uffbe\001\002\000\032\014" +
    "\045\025\052\033\066\070\063\071\065\072\056\075\070" +
    "\076\050\077\055\100\046\101\062\102\054\001\002\000" +
    "\042\013\112\014\105\015\110\016\113\017\114\020\116" +
    "\021\106\022\120\023\107\026\115\027\111\030\117\031" +
    "\102\032\103\034\170\044\104\001\002\000\054\011\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\044" +
    "\uffb5\001\002\000\054\011\uffa7\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\024" +
    "\uffa7\026\115\027\111\030\uffa7\031\uffa7\032\uffa7\034\uffa7" +
    "\035\uffa7\040\uffa7\041\uffa7\044\104\001\002\000\034\014" +
    "\045\025\052\033\066\043\173\070\063\071\065\072\056" +
    "\075\070\076\050\077\055\100\046\101\062\102\054\001" +
    "\002\000\004\024\207\001\002\000\036\014\uffd9\025\uffd9" +
    "\033\uffd9\036\uffd9\043\uffd9\070\uffd9\071\uffd9\072\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001\002" +
    "\000\042\013\112\014\105\015\110\016\113\017\114\020" +
    "\116\021\106\022\120\023\107\024\201\026\115\027\111" +
    "\030\117\031\102\032\103\044\104\001\002\000\036\014" +
    "\045\025\052\033\066\036\200\043\173\070\063\071\065" +
    "\072\056\075\070\076\050\077\055\100\046\101\062\102" +
    "\054\001\002\000\036\014\uffd8\025\uffd8\033\uffd8\036\uffd8" +
    "\043\uffd8\070\uffd8\071\uffd8\072\uffd8\075\uffd8\076\uffd8\077" +
    "\uffd8\100\uffd8\101\uffd8\102\uffd8\001\002\000\042\002\uffda" +
    "\003\uffda\036\uffda\045\uffda\046\uffda\047\uffda\051\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\061\uffda\065\uffda" +
    "\067\uffda\102\uffda\001\002\000\004\027\202\001\002\000" +
    "\004\035\203\001\002\000\036\003\037\045\030\046\021" +
    "\047\022\051\043\053\013\054\041\055\025\056\035\057" +
    "\007\061\012\065\010\067\034\102\024\001\002\000\040" +
    "\003\037\036\206\045\030\046\021\047\022\051\043\053" +
    "\013\054\041\055\025\056\035\057\007\061\012\065\010" +
    "\067\034\102\024\001\002\000\042\002\ufffe\003\ufffe\036" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\051\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\061\ufffe\065\ufffe\067\ufffe\102" +
    "\ufffe\001\002\000\036\014\uffd7\025\uffd7\033\uffd7\036\uffd7" +
    "\043\uffd7\070\uffd7\071\uffd7\072\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\100\uffd7\101\uffd7\102\uffd7\001\002\000\004\027\210" +
    "\001\002\000\004\035\211\001\002\000\036\003\037\045" +
    "\030\046\021\047\022\051\043\053\013\054\041\055\025" +
    "\056\035\057\007\061\012\065\010\067\034\102\024\001" +
    "\002\000\040\003\037\036\213\045\030\046\021\047\022" +
    "\051\043\053\013\054\041\055\025\056\035\057\007\061" +
    "\012\065\010\067\034\102\024\001\002\000\036\014\uffd6" +
    "\025\uffd6\033\uffd6\036\uffd6\043\uffd6\070\uffd6\071\uffd6\072" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\001\002\000\054\011\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035" +
    "\uffb4\040\uffb4\041\uffb4\044\uffb4\001\002\000\004\102\216" +
    "\001\002\000\010\013\236\014\240\024\237\001\002\000" +
    "\032\014\045\025\052\033\066\070\063\071\065\072\056" +
    "\075\070\076\050\077\055\100\046\101\062\102\054\001" +
    "\002\000\042\011\221\013\112\014\105\015\110\016\113" +
    "\017\114\020\116\021\106\022\120\023\107\026\115\027" +
    "\111\030\117\031\102\032\103\044\104\001\002\000\004" +
    "\102\222\001\002\000\010\013\230\014\232\024\231\001" +
    "\002\000\004\034\224\001\002\000\004\035\225\001\002" +
    "\000\036\003\037\045\030\046\021\047\022\051\043\053" +
    "\013\054\041\055\025\056\035\057\007\061\012\065\010" +
    "\067\034\102\024\001\002\000\040\003\037\036\227\045" +
    "\030\046\021\047\022\051\043\053\013\054\041\055\025" +
    "\056\035\057\007\061\012\065\010\067\034\102\024\001" +
    "\002\000\042\002\uffd4\003\uffd4\036\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\051\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\061\uffd4\065\uffd4\067\uffd4\102\uffd4\001\002\000\004" +
    "\013\235\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\004\014\233\001\002\000" +
    "\004\034\uffd1\001\002\000\042\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\026" +
    "\115\027\111\030\117\031\102\032\103\034\uffd3\044\104" +
    "\001\002\000\004\034\uffd2\001\002\000\004\013\245\001" +
    "\002\000\032\014\045\025\052\033\066\070\063\071\065" +
    "\072\056\075\070\076\050\077\055\100\046\101\062\102" +
    "\054\001\002\000\004\014\241\001\002\000\004\011\242" +
    "\001\002\000\070\002\uffdf\003\uffdf\014\uffdf\025\uffdf\033" +
    "\uffdf\036\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf\065\uffdf\067" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\102\uffdf\001\002\000\042\011\244\013" +
    "\112\014\105\015\110\016\113\017\114\020\116\021\106" +
    "\022\120\023\107\026\115\027\111\030\117\031\102\032" +
    "\103\044\104\001\002\000\070\002\uffe1\003\uffe1\014\uffe1" +
    "\025\uffe1\033\uffe1\036\uffe1\045\uffe1\046\uffe1\047\uffe1\051" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\061\uffe1" +
    "\065\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\001\002\000\004" +
    "\011\246\001\002\000\070\002\uffe0\003\uffe0\014\uffe0\025" +
    "\uffe0\033\uffe0\036\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\061\uffe0\065" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\075\uffe0\076\uffe0" +
    "\077\uffe0\100\uffe0\101\uffe0\102\uffe0\001\002\000\042\002" +
    "\ufff3\003\ufff3\036\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\061\ufff3\065" +
    "\ufff3\067\ufff3\102\ufff3\001\002\000\042\002\uffcf\003\uffcf" +
    "\036\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\061\uffcf\065\uffcf\067\uffcf" +
    "\102\uffcf\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\042\013\112\014\105\015" +
    "\110\016\113\017\114\020\116\021\106\022\120\023\107" +
    "\026\115\027\111\030\117\031\102\032\103\034\253\044" +
    "\104\001\002\000\004\011\254\001\002\000\042\002\uffcd" +
    "\003\uffcd\036\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\053" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\061\uffcd\065\uffcd" +
    "\067\uffcd\102\uffcd\001\002\000\004\002\001\001\002\000" +
    "\004\012\257\001\002\000\014\004\071\005\077\006\076" +
    "\007\072\010\075\001\002\000\010\011\263\024\262\037" +
    "\261\001\002\000\004\040\273\001\002\000\032\014\045" +
    "\025\052\033\265\070\063\071\065\072\056\075\070\076" +
    "\050\077\055\100\046\101\062\102\054\001\002\000\042" +
    "\002\uffe6\003\uffe6\036\uffe6\045\uffe6\046\uffe6\047\uffe6\051" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\061\uffe6" +
    "\065\uffe6\067\uffe6\102\uffe6\001\002\000\042\011\272\013" +
    "\112\014\105\015\110\016\113\017\114\020\116\021\106" +
    "\022\120\023\107\026\115\027\111\030\117\031\102\032" +
    "\103\044\104\001\002\000\044\004\071\005\077\006\076" +
    "\007\072\010\075\014\045\025\052\033\066\070\063\071" +
    "\065\072\056\075\070\076\050\077\055\100\046\101\062" +
    "\102\054\001\002\000\004\034\267\001\002\000\032\014" +
    "\045\025\052\033\066\070\063\071\065\072\056\075\070" +
    "\076\050\077\055\100\046\101\062\102\054\001\002\000" +
    "\042\011\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\044\uff9c\001\002\000\042\002\uffe2" +
    "\003\uffe2\036\uffe2\045\uffe2\046\uffe2\047\uffe2\051\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\061\uffe2\065\uffe2" +
    "\067\uffe2\102\uffe2\001\002\000\042\002\uffe4\003\uffe4\036" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\061\uffe4\065\uffe4\067\uffe4\102" +
    "\uffe4\001\002\000\006\024\274\037\275\001\002\000\004" +
    "\037\316\001\002\000\004\040\276\001\002\000\004\024" +
    "\277\001\002\000\004\037\300\001\002\000\004\037\301" +
    "\001\002\000\032\014\045\025\052\033\066\070\063\071" +
    "\065\072\056\075\070\076\050\077\055\100\046\101\062" +
    "\102\054\001\002\000\006\040\304\041\303\001\002\000" +
    "\004\037\306\001\002\000\004\011\305\001\002\000\042" +
    "\002\uffc9\003\uffc9\036\uffc9\045\uffc9\046\uffc9\047\uffc9\051" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9" +
    "\065\uffc9\067\uffc9\102\uffc9\001\002\000\032\014\045\025" +
    "\052\033\066\070\063\071\065\072\056\075\070\076\050" +
    "\077\055\100\046\101\062\102\054\001\002\000\006\040" +
    "\312\041\311\001\002\000\044\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\026" +
    "\115\027\111\030\117\031\102\032\103\040\uffc8\041\uffc8" +
    "\044\104\001\002\000\032\014\045\025\052\033\066\070" +
    "\063\071\065\072\056\075\070\076\050\077\055\100\046" +
    "\101\062\102\054\001\002\000\006\040\uffc5\041\uffc5\001" +
    "\002\000\044\013\112\014\105\015\110\016\113\017\114" +
    "\020\116\021\106\022\120\023\107\026\115\027\111\030" +
    "\117\031\102\032\103\040\uffc7\041\uffc7\044\104\001\002" +
    "\000\006\040\315\041\311\001\002\000\006\040\uffc6\041" +
    "\uffc6\001\002\000\032\014\045\025\052\033\066\070\063" +
    "\071\065\072\056\075\070\076\050\077\055\100\046\101" +
    "\062\102\054\001\002\000\006\040\320\041\311\001\002" +
    "\000\004\011\321\001\002\000\042\002\uffcb\003\uffcb\036" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\061\uffcb\065\uffcb\067\uffcb\102" +
    "\uffcb\001\002\000\036\003\037\045\030\046\021\047\022" +
    "\051\043\053\013\054\041\055\025\056\035\057\007\061" +
    "\012\065\010\067\034\102\024\001\002\000\040\003\037" +
    "\036\324\045\030\046\021\047\022\051\043\053\013\054" +
    "\041\055\025\056\035\057\007\061\012\065\010\067\034" +
    "\102\024\001\002\000\004\053\325\001\002\000\004\033" +
    "\326\001\002\000\032\014\045\025\052\033\066\070\063" +
    "\071\065\072\056\075\070\076\050\077\055\100\046\101" +
    "\062\102\054\001\002\000\042\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\026" +
    "\115\027\111\030\117\031\102\032\103\034\330\044\104" +
    "\001\002\000\004\011\331\001\002\000\042\002\uffd0\003" +
    "\uffd0\036\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0\065\uffd0\067" +
    "\uffd0\102\uffd0\001\002\000\004\063\347\001\002\000\032" +
    "\014\045\025\052\033\066\070\063\071\065\072\056\075" +
    "\070\076\050\077\055\100\046\101\062\102\054\001\002" +
    "\000\042\013\112\014\105\015\110\016\113\017\114\020" +
    "\116\021\106\022\120\023\107\026\115\027\111\030\117" +
    "\031\102\032\103\040\335\044\104\001\002\000\006\024" +
    "\336\037\337\001\002\000\032\014\045\025\052\033\066" +
    "\070\063\071\065\072\056\075\070\076\050\077\055\100" +
    "\046\101\062\102\054\001\002\000\032\014\045\025\052" +
    "\033\066\070\063\071\065\072\056\075\070\076\050\077" +
    "\055\100\046\101\062\102\054\001\002\000\042\013\112" +
    "\014\105\015\110\016\113\017\114\020\116\021\106\022" +
    "\120\023\107\026\115\027\111\030\117\031\102\032\103" +
    "\040\341\044\104\001\002\000\004\024\342\001\002\000" +
    "\032\014\045\025\052\033\066\070\063\071\065\072\056" +
    "\075\070\076\050\077\055\100\046\101\062\102\054\001" +
    "\002\000\042\011\344\013\112\014\105\015\110\016\113" +
    "\017\114\020\116\021\106\022\120\023\107\026\115\027" +
    "\111\030\117\031\102\032\103\044\104\001\002\000\042" +
    "\002\uffc1\003\uffc1\036\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\061\uffc1" +
    "\065\uffc1\067\uffc1\102\uffc1\001\002\000\042\011\346\013" +
    "\112\014\105\015\110\016\113\017\114\020\116\021\106" +
    "\022\120\023\107\026\115\027\111\030\117\031\102\032" +
    "\103\044\104\001\002\000\042\002\uffc2\003\uffc2\036\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\051\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\061\uffc2\065\uffc2\067\uffc2\102\uffc2" +
    "\001\002\000\004\033\350\001\002\000\032\014\045\025" +
    "\052\033\066\070\063\071\065\072\056\075\070\076\050" +
    "\077\055\100\046\101\062\102\054\001\002\000\042\013" +
    "\112\014\105\015\110\016\113\017\114\020\116\021\106" +
    "\022\120\023\107\026\115\027\111\030\117\031\102\032" +
    "\103\034\352\044\104\001\002\000\004\011\353\001\002" +
    "\000\042\002\uffbf\003\uffbf\036\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\061\uffbf\065\uffbf\067\uffbf\102\uffbf\001\002\000\032\014" +
    "\045\025\052\033\066\070\063\071\065\072\056\075\070" +
    "\076\050\077\055\100\046\101\062\102\054\001\002\000" +
    "\042\013\112\014\105\015\110\016\113\017\114\020\116" +
    "\021\106\022\120\023\107\026\115\027\111\030\117\031" +
    "\102\032\103\034\356\044\104\001\002\000\004\035\357" +
    "\001\002\000\036\003\037\045\030\046\021\047\022\051" +
    "\043\053\013\054\041\055\025\056\035\057\007\061\012" +
    "\065\010\067\034\102\024\001\002\000\040\003\037\036" +
    "\361\045\030\046\021\047\022\051\043\053\013\054\041" +
    "\055\025\056\035\057\007\061\012\065\010\067\034\102" +
    "\024\001\002\000\044\002\uffde\003\uffde\036\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\362\051\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\061\uffde\065\uffde\067\uffde\102\uffde" +
    "\001\002\000\006\035\365\047\022\001\002\000\042\002" +
    "\uffdd\003\uffdd\036\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\061\uffdd\065" +
    "\uffdd\067\uffdd\102\uffdd\001\002\000\042\002\uffdb\003\uffdb" +
    "\036\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\061\uffdb\065\uffdb\067\uffdb" +
    "\102\uffdb\001\002\000\036\003\037\045\030\046\021\047" +
    "\022\051\043\053\013\054\041\055\025\056\035\057\007" +
    "\061\012\065\010\067\034\102\024\001\002\000\040\003" +
    "\037\036\367\045\030\046\021\047\022\051\043\053\013" +
    "\054\041\055\025\056\035\057\007\061\012\065\010\067" +
    "\034\102\024\001\002\000\042\002\uffdc\003\uffdc\036\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\051\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\061\uffdc\065\uffdc\067\uffdc\102\uffdc" +
    "\001\002\000\004\012\371\001\002\000\014\004\071\005" +
    "\077\006\076\007\072\010\075\001\002\000\010\011\375" +
    "\024\373\037\374\001\002\000\032\014\045\025\052\033" +
    "\u010c\070\063\071\065\072\056\075\070\076\050\077\055" +
    "\100\046\101\062\102\054\001\002\000\004\040\376\001" +
    "\002\000\042\002\uffe7\003\uffe7\036\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\061\uffe7\065\uffe7\067\uffe7\102\uffe7\001\002\000\006" +
    "\024\u0100\037\377\001\002\000\004\040\u0105\001\002\000" +
    "\004\037\u0101\001\002\000\032\014\045\025\052\033\066" +
    "\070\063\071\065\072\056\075\070\076\050\077\055\100" +
    "\046\101\062\102\054\001\002\000\006\040\u0103\041\311" +
    "\001\002\000\004\011\u0104\001\002\000\042\002\uffcc\003" +
    "\uffcc\036\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\061\uffcc\065\uffcc\067" +
    "\uffcc\102\uffcc\001\002\000\004\024\u0106\001\002\000\004" +
    "\037\u0107\001\002\000\004\037\301\001\002\000\006\040" +
    "\u0109\041\303\001\002\000\004\011\u010a\001\002\000\042" +
    "\002\uffca\003\uffca\036\uffca\045\uffca\046\uffca\047\uffca\051" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\061\uffca" +
    "\065\uffca\067\uffca\102\uffca\001\002\000\042\011\u0111\013" +
    "\112\014\105\015\110\016\113\017\114\020\116\021\106" +
    "\022\120\023\107\026\115\027\111\030\117\031\102\032" +
    "\103\044\104\001\002\000\044\004\071\005\077\006\076" +
    "\007\072\010\075\014\045\025\052\033\066\070\063\071" +
    "\065\072\056\075\070\076\050\077\055\100\046\101\062" +
    "\102\054\001\002\000\004\034\u010e\001\002\000\032\014" +
    "\045\025\052\033\066\070\063\071\065\072\056\075\070" +
    "\076\050\077\055\100\046\101\062\102\054\001\002\000" +
    "\042\011\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\044\uff9c\001\002\000\042\002\uffe3" +
    "\003\uffe3\036\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\053" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3\065\uffe3" +
    "\067\uffe3\102\uffe3\001\002\000\042\002\uffe5\003\uffe5\036" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\061\uffe5\065\uffe5\067\uffe5\102" +
    "\uffe5\001\002\000\032\014\045\025\052\033\066\070\063" +
    "\071\065\072\056\075\070\076\050\077\055\100\046\101" +
    "\062\102\054\001\002\000\042\013\112\014\105\015\110" +
    "\016\113\017\114\020\116\021\106\022\120\023\107\026" +
    "\115\027\111\030\117\031\102\032\103\034\u0114\044\104" +
    "\001\002\000\004\035\u0115\001\002\000\036\003\037\045" +
    "\030\046\021\047\022\051\043\053\013\054\041\055\025" +
    "\056\035\057\007\061\012\065\010\067\034\102\024\001" +
    "\002\000\040\003\037\036\u0117\045\030\046\021\047\022" +
    "\051\043\053\013\054\041\055\025\056\035\057\007\061" +
    "\012\065\010\067\034\102\024\001\002\000\042\002\uffd5" +
    "\003\uffd5\036\uffd5\045\uffd5\046\uffd5\047\uffd5\051\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\061\uffd5\065\uffd5" +
    "\067\uffd5\102\uffd5\001\002\000\014\004\071\005\077\006" +
    "\076\007\072\010\075\001\002\000\004\027\u011a\001\002" +
    "\000\004\102\u011b\001\002\000\004\024\u011c\001\002\000" +
    "\004\062\u011d\001\002\000\004\061\u011e\001\002\000\004" +
    "\033\u011f\001\002\000\004\034\u0120\001\002\000\004\011" +
    "\u0121\001\002\000\042\002\uffc0\003\uffc0\036\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\061\uffc0\065\uffc0\067\uffc0\102\uffc0\001\002" +
    "\000\004\102\u0123\001\002\000\004\012\u012a\001\002\000" +
    "\006\036\u0126\102\u0123\001\002\000\006\036\uffbb\102\uffbb" +
    "\001\002\000\004\102\u0128\001\002\000\006\036\uffbc\102" +
    "\uffbc\001\002\000\004\011\u0129\001\002\000\042\002\uffbd" +
    "\003\uffbd\036\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\061\uffbd\065\uffbd" +
    "\067\uffbd\102\uffbd\001\002\000\016\004\071\005\077\006" +
    "\076\007\072\010\075\102\u012b\001\002\000\004\011\u012e" +
    "\001\002\000\004\011\u012d\001\002\000\006\036\uffba\102" +
    "\uffba\001\002\000\006\036\uffb9\102\uffb9\001\002\000\042" +
    "\002\uffce\003\uffce\036\uffce\045\uffce\046\uffce\047\uffce\051" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\061\uffce" +
    "\065\uffce\067\uffce\102\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\050\002\031\003\016\004\004\006\032\007" +
    "\043\010\022\012\017\015\013\016\026\020\025\021\005" +
    "\022\003\023\010\024\037\025\035\032\015\033\030\035" +
    "\014\044\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\204\006\032\007\043\010\022\012\017\015\013\016\026" +
    "\020\025\021\005\022\003\023\010\024\037\025\035\032" +
    "\015\033\030\035\014\044\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\046\031\057" +
    "\036\052\040\063\041\060\042\056\043\066\047\050\001" +
    "\001\000\002\001\001\000\022\030\046\031\057\036\052" +
    "\040\063\041\060\042\056\043\066\047\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\046\031\057\036\052\040\063\041" +
    "\060\042\056\043\066\047\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\073\030\046\031\057\036\052\040\063" +
    "\041\060\042\056\043\066\047\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\046\031\057" +
    "\036\052\040\063\041\060\042\056\043\066\047\100\001" +
    "\001\000\002\001\001\000\022\030\046\031\057\036\052" +
    "\040\063\041\060\042\056\043\066\047\136\001\001\000" +
    "\022\030\046\031\057\036\052\040\063\041\060\042\056" +
    "\043\066\047\135\001\001\000\022\030\046\031\057\036" +
    "\052\040\063\041\060\042\056\043\066\047\134\001\001" +
    "\000\022\030\046\031\057\036\052\040\063\041\060\042" +
    "\056\043\066\047\133\001\001\000\022\030\046\031\057" +
    "\036\052\040\063\041\060\042\056\043\066\047\132\001" +
    "\001\000\022\030\046\031\057\036\052\040\063\041\060" +
    "\042\056\043\066\047\131\001\001\000\022\030\046\031" +
    "\057\036\052\040\063\041\060\042\056\043\066\047\130" +
    "\001\001\000\022\030\046\031\057\036\052\040\063\041" +
    "\060\042\056\043\066\047\127\001\001\000\022\030\046" +
    "\031\057\036\052\040\063\041\060\042\056\043\066\047" +
    "\126\001\001\000\022\030\046\031\057\036\052\040\063" +
    "\041\060\042\056\043\066\047\125\001\001\000\022\030" +
    "\046\031\057\036\052\040\063\041\060\042\056\043\066" +
    "\047\124\001\001\000\022\030\046\031\057\036\052\040" +
    "\063\041\060\042\056\043\066\047\123\001\001\000\022" +
    "\030\046\031\057\036\052\040\063\041\060\042\056\043" +
    "\066\047\122\001\001\000\022\030\046\031\057\036\052" +
    "\040\063\041\060\042\056\043\066\047\121\001\001\000" +
    "\022\030\046\031\057\036\052\040\063\041\060\042\056" +
    "\043\066\047\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\030\046\031\057\036\052" +
    "\040\063\041\060\042\056\043\066\047\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\046\031\057" +
    "\036\052\040\063\041\060\042\056\043\066\047\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\046" +
    "\031\057\036\052\040\063\041\060\042\056\043\066\047" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\046\031\057\036\052\040\063\041" +
    "\060\042\056\043\066\047\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\046\031\057\036\052\040" +
    "\063\041\060\042\056\043\066\047\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\046\031\057\036\052\040\063\041\060" +
    "\042\056\043\066\047\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\046\031\057\036\052\040\063" +
    "\041\060\042\056\043\066\047\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\013\175" +
    "\014\173\030\046\031\057\036\052\040\063\041\060\042" +
    "\056\043\066\047\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\176\030\046\031" +
    "\057\036\052\040\063\041\060\042\056\043\066\047\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\203\004\004\006\032" +
    "\007\043\010\022\012\017\015\013\016\026\020\025\021" +
    "\005\022\003\023\010\024\037\025\035\032\015\033\030" +
    "\035\014\044\041\001\001\000\044\004\204\006\032\007" +
    "\043\010\022\012\017\015\013\016\026\020\025\021\005" +
    "\022\003\023\010\024\037\025\035\032\015\033\030\035" +
    "\014\044\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\211\004" +
    "\004\006\032\007\043\010\022\012\017\015\013\016\026" +
    "\020\025\021\005\022\003\023\010\024\037\025\035\032" +
    "\015\033\030\035\014\044\041\001\001\000\044\004\204" +
    "\006\032\007\043\010\022\012\017\015\013\016\026\020" +
    "\025\021\005\022\003\023\010\024\037\025\035\032\015" +
    "\033\030\035\014\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\216\001\001\000\002\001\001" +
    "\000\022\030\046\031\057\036\052\040\063\041\060\042" +
    "\056\043\066\047\217\001\001\000\002\001\001\000\004" +
    "\017\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\225\004\004\006\032\007\043" +
    "\010\022\012\017\015\013\016\026\020\025\021\005\022" +
    "\003\023\010\024\037\025\035\032\015\033\030\035\014" +
    "\044\041\001\001\000\044\004\204\006\032\007\043\010" +
    "\022\012\017\015\013\016\026\020\025\021\005\022\003" +
    "\023\010\024\037\025\035\032\015\033\030\035\014\044" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\046\031\057\036\052\040\063\041\060\042\056\043" +
    "\066\047\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\046\031\057\036\052\040\063\041\060\042\056" +
    "\043\066\047\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\046\031\057\036\052\040\063" +
    "\041\060\042\056\043\066\047\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\030\046\031\057\036\052" +
    "\040\063\041\060\042\056\043\066\047\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\265\030\046" +
    "\031\057\036\052\040\063\041\060\042\056\043\066\047" +
    "\072\001\001\000\002\001\001\000\022\030\046\031\057" +
    "\036\052\040\063\041\060\042\056\043\066\047\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\301\001\001" +
    "\000\024\026\313\030\046\031\057\036\052\040\063\041" +
    "\060\042\056\043\066\047\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\026\306\030\046\031\057\036\052\040\063\041\060" +
    "\042\056\043\066\047\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\046\031\057\036\052\040\063" +
    "\041\060\042\056\043\066\047\312\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\316\030\046\031\057\036\052\040\063\041" +
    "\060\042\056\043\066\047\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\322\004" +
    "\004\006\032\007\043\010\022\012\017\015\013\016\026" +
    "\020\025\021\005\022\003\023\010\024\037\025\035\032" +
    "\015\033\030\035\014\044\041\001\001\000\044\004\204" +
    "\006\032\007\043\010\022\012\017\015\013\016\026\020" +
    "\025\021\005\022\003\023\010\024\037\025\035\032\015" +
    "\033\030\035\014\044\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\046\031\057\036\052\040\063" +
    "\041\060\042\056\043\066\047\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\030\046\031\057\036\052\040\063\041\060\042" +
    "\056\043\066\047\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\046\031\057\036\052\040\063\041" +
    "\060\042\056\043\066\047\344\001\001\000\022\030\046" +
    "\031\057\036\052\040\063\041\060\042\056\043\066\047" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\046\031\057\036\052\040\063\041\060\042\056\043" +
    "\066\047\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\046\031\057\036\052\040\063\041\060\042\056" +
    "\043\066\047\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\030\046\031\057\036\052" +
    "\040\063\041\060\042\056\043\066\047\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\357\004\004" +
    "\006\032\007\043\010\022\012\017\015\013\016\026\020" +
    "\025\021\005\022\003\023\010\024\037\025\035\032\015" +
    "\033\030\035\014\044\041\001\001\000\044\004\204\006" +
    "\032\007\043\010\022\012\017\015\013\016\026\020\025" +
    "\021\005\022\003\023\010\024\037\025\035\032\015\033" +
    "\030\035\014\044\041\001\001\000\004\011\362\001\001" +
    "\000\004\010\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\365\004\004\006\032\007\043\010\022" +
    "\012\017\015\013\016\026\020\025\021\005\022\003\023" +
    "\010\024\037\025\035\032\015\033\030\035\014\044\041" +
    "\001\001\000\044\004\204\006\032\007\043\010\022\012" +
    "\017\015\013\016\026\020\025\021\005\022\003\023\010" +
    "\024\037\025\035\032\015\033\030\035\014\044\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\371" +
    "\001\001\000\002\001\001\000\022\030\046\031\057\036" +
    "\052\040\063\041\060\042\056\043\066\047\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\026\u0101\030\046" +
    "\031\057\036\052\040\063\041\060\042\056\043\066\047" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\u010c\030\046\031" +
    "\057\036\052\040\063\041\060\042\056\043\066\047\072" +
    "\001\001\000\002\001\001\000\022\030\046\031\057\036" +
    "\052\040\063\041\060\042\056\043\066\047\u010e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\046\031\057\036\052\040\063\041\060\042\056" +
    "\043\066\047\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\u0115\004\004\006\032\007\043\010\022" +
    "\012\017\015\013\016\026\020\025\021\005\022\003\023" +
    "\010\024\037\025\035\032\015\033\030\035\014\044\041" +
    "\001\001\000\044\004\204\006\032\007\043\010\022\012" +
    "\017\015\013\016\026\020\025\021\005\022\003\023\010" +
    "\024\037\025\035\032\015\033\030\035\014\044\041\001" +
    "\001\000\002\001\001\000\004\005\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\u0123\046" +
    "\u0124\001\001\000\002\001\001\000\004\046\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //errores
        public ArrayList<Errores> errores = new ArrayList<>();


        public String resultado = ""; 

        public void syntax_error(Symbol s)
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
                errores.add(new Errores("Error Sintactico", "   \""+ s.value +"\"   "+" Recuperado", s.left, s.right));
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        }

        public ArrayList<Errores> getErrores(){
                return errores;
        }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= printConsole 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= declararVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= asignarVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresiones ::= sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresiones ::= sentMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresiones ::= sentWhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresiones ::= sentFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresiones ::= sentDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresiones ::= break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresiones ::= continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresiones ::= error PYC 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresiones ::= vector1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresiones ::= vector2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresiones ::= asignacionVector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresiones ::= decListas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresiones ::= addLista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresiones ::= decStructs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipoExpresion ::= INT 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoExpresion ::= DOUBLE 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoExpresion ::= BOOL 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoExpresion ::= CHAR 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoExpresion ::= STRING 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null, tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null,tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignarVariables ::= ID IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignarVariables ::= ID MAS MAS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignarVariables ::= ID MENOS MENOS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(exp, inst, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE elseIF 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion elseIf = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, inst, elseIf, expleft, expright);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elseIF ::= ELSE A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Else(inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elseIF ::= ELSE sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentMATCH ::= MATCH expresion A_LLAVE casos C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> c = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Match(exp, c, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentMATCH",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // casos ::= caso 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // casos ::= casos caso 
            {
              LinkedList<Casos> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // caso ::= expresion IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caso ::= GUION_BAJO IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(new Dato("_", TipoDato.CADENA, instleft, instright), inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentWhile ::= WHILE A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =  new While(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentWhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentFOR ::= FOR A_PARENTESIS asignarVariables expresion PYC updateFOR C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new For(a, exp, b, inst,aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentFOR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // updateFOR ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // updateFOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // updateFOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentDO ::= DO A_LLAVE instruccion C_LLAVE WHILE A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(exp, inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // break ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Break(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // continue ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Continue(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printConsole ::= PRINTLN A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(val);RESULT= new Println(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printConsole",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vector1 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vector1 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vector2 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vector2 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaExpresionesVectores ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaExpresionesVectores ::= listaExpresionesVectores COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaExpresionesVectores2 ::= A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaExpresionesVectores2 ::= listaExpresionesVectores2 COMA A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Expresion>> a = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // accesoVector ::= ID A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoVector(id.toLowerCase(), indice, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // accesoVector2D ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoArreglo2D(id.toLowerCase(), indice1, indice2, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector2D",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos(id.toLowerCase(), indice, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos2D(id.toLowerCase(), indice1, indice2, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decListas ::= LIST MENOR_Q tipoExpresion MAYOR_Q ID IGUAL NEW LIST A_PARENTESIS C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		RESULT = new DeclaraLista(tipo, id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decListas",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // addLista ::= ID PUNTO APPEND A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new AddLista(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addLista",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // removeLista ::= ID PUNTO REMOVE A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new RemoveElementoLista(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("removeLista",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decStructs ::= STRUCT A_LLAVE listaCampos C_LLAVE ID PYC 
            {
              Instruccion RESULT =null;
		int camposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int camposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Campo> campos = (LinkedList<Campo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new DecStruct(id.toLowerCase(), campos, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decStructs",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaCampos ::= listaCampos campoStruct 
            {
              LinkedList<Campo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Campo> b = (LinkedList<Campo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Campo a = (Campo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCampos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listaCampos ::= campoStruct 
            {
              LinkedList<Campo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Campo a = (Campo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCampos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // campoStruct ::= ID DOS_P tipoExpresion PYC 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Campo(tipo, id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campoStruct",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // campoStruct ::= ID DOS_P ID PYC 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idStruct2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idStruct2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String idStruct2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CampoStruct(idStruct2.toLowerCase(), id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campoStruct",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // natRound ::= ROUND A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Round(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natRound",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // natLength ::= LENGTH A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Length(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natLength",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // natToString ::= TOSTRING A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ToString(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natToString",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // natfind ::= ID PUNTO FIND A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Find(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natfind",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val, "-", null, valleft,valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "**", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "*", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion DIVIDIR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "/", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "%", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "+", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "-", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "==", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "!=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion MENOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion MAYOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val, null, "!", valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "^", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "||", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "&&", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.INT, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.DOUBLE, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= BOOLEANO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.BOOLEAN, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CADENA, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= CARACTER 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CHAR, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new RecVariable(id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= A_PARENTESIS tipoExpresion C_PARENTESIS expresion 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Casteo(exp, tipo, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= accesoVector2D 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= removeLista 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= natRound 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= natLength 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= natfind 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= natToString 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
