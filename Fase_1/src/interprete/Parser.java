
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package interprete;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import instruccion.Instruccion;
import expresiones.Dato;
import expresiones.Aritmeticas;
import expresiones.TipoDato;
import expresiones.Expresion;
import expresiones.Negativo;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.RecVariable;
import funciones.DecVariables;
import funciones.Println;
import funciones.AsignarVariables;
import funciones.IncDec;
import funciones.If;
import funciones.Else;
import funciones.Match;
import funciones.Casos;
import funciones.While;
import funciones.For;
import funciones.DoWhile;
import funciones.Break;
import funciones.Continue;
import excepciones.Errores;
import expresiones.Casteo;
import funciones.DecArreglos;
import funciones.DecArreglos2D;
import expresiones.AccesoVector;
import expresiones.AccesoArreglo2D;
import funciones.AsigArreglos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\007\000\002\006\007\000\002" +
    "\006\011\000\002\006\011\000\002\006\014\000\002\006" +
    "\014\000\002\007\006\000\002\007\006\000\002\007\006" +
    "\000\002\010\011\000\002\010\012\000\002\011\006\000" +
    "\002\011\004\000\002\012\007\000\002\013\003\000\002" +
    "\013\004\000\002\014\010\000\002\014\010\000\002\015" +
    "\011\000\002\016\014\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\013\000\002\021\004\000" +
    "\002\022\004\000\002\023\007\000\002\024\015\000\002" +
    "\024\015\000\002\025\017\000\002\025\017\000\002\026" +
    "\003\000\002\026\005\000\002\027\005\000\002\027\007" +
    "\000\002\030\006\000\002\031\011\000\002\032\011\000" +
    "\002\032\014\000\002\033\004\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\004\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\006\000" +
    "\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\032\003\032\045\025\046\016\047\020\051" +
    "\036\053\011\054\035\055\022\056\031\057\007\067\030" +
    "\102\021\001\002\000\036\002\ufff4\003\ufff4\036\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\067\ufff4\102\ufff4\001\002\000\036\002" +
    "\uffff\003\uffff\036\uffff\045\uffff\046\uffff\047\uffff\051\uffff" +
    "\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\067\uffff\102" +
    "\uffff\001\002\000\036\002\ufff5\003\ufff5\036\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\067\ufff5\102\ufff5\001\002\000\004\011\363" +
    "\001\002\000\036\002\ufffd\003\ufffd\036\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\051\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\067\ufffd\102\ufffd\001\002\000\004\033\355\001" +
    "\002\000\036\002\ufff8\003\ufff8\036\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\067\ufff8\102\ufff8\001\002\000\036\002\ufff0\003\ufff0" +
    "\036\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\067\ufff0\102\ufff0\001\002" +
    "\000\034\002\000\003\032\045\025\046\016\047\020\051" +
    "\036\053\011\054\035\055\022\056\031\057\007\067\030" +
    "\102\021\001\002\000\036\002\ufff9\003\ufff9\036\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\067\ufff9\102\ufff9\001\002\000\004\102" +
    "\323\001\002\000\036\002\ufffa\003\ufffa\036\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\067\ufffa\102\ufffa\001\002\000\004\033\307" +
    "\001\002\000\012\013\177\014\201\024\200\037\273\001" +
    "\002\000\004\035\263\001\002\000\036\002\ufff6\003\ufff6" +
    "\036\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\067\ufff6\102\ufff6\001\002" +
    "\000\036\002\ufff7\003\ufff7\036\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\067\ufff7\102\ufff7\001\002\000\004\102\217\001\002\000" +
    "\004\002\216\001\002\000\036\002\ufffc\003\ufffc\036\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\051\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\067\ufffc\102\ufffc\001\002\000\004" +
    "\033\212\001\002\000\004\011\211\001\002\000\004\011" +
    "\210\001\002\000\036\002\ufff1\003\ufff1\036\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\051\ufff1\053\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\057\ufff1\067\ufff1\102\ufff1\001\002\000\036\002\ufff2" +
    "\003\ufff2\036\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\067\ufff2\102\ufff2" +
    "\001\002\000\004\033\156\001\002\000\024\014\042\025" +
    "\051\033\053\075\045\076\041\077\043\100\040\101\052" +
    "\102\050\001\002\000\036\002\ufffb\003\ufffb\036\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\067\ufffb\102\ufffb\001\002\000\054\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\034\uffae\035\uffae\040\uffae\041\uffae" +
    "\044\uffae\001\002\000\054\011\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034" +
    "\uffb0\035\uffb0\040\uffb0\041\uffb0\044\uffb0\001\002\000\024" +
    "\014\042\025\051\033\053\075\045\076\041\077\043\100" +
    "\040\101\052\102\050\001\002\000\054\011\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf\044\uffaf\001" +
    "\002\000\054\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa" +
    "\040\uffaa\041\uffaa\044\uffaa\001\002\000\054\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\034\uffb1\035\uffb1\040\uffb1\041\uffb1\044\uffb1" +
    "\001\002\000\054\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035" +
    "\uffa9\040\uffa9\041\uffa9\044\uffa9\001\002\000\042\013\074" +
    "\014\067\015\073\016\076\017\077\020\101\021\071\022" +
    "\102\023\072\026\100\027\075\030\103\031\065\032\066" +
    "\035\133\044\070\001\002\000\056\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\034\uffac\035\uffac\037\125\040\uffac\041\uffac\044\uffac" +
    "\001\002\000\024\014\042\025\051\033\053\075\045\076" +
    "\041\077\043\100\040\101\052\102\050\001\002\000\054" +
    "\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\040\uffad\041" +
    "\uffad\044\uffad\001\002\000\036\004\054\005\062\006\061" +
    "\007\055\010\060\014\042\025\051\033\053\075\045\076" +
    "\041\077\043\100\040\101\052\102\050\001\002\000\012" +
    "\011\uffef\024\uffef\034\uffef\037\uffef\001\002\000\012\011" +
    "\uffec\024\uffec\034\uffec\037\uffec\001\002\000\042\013\074" +
    "\014\067\015\073\016\076\017\077\020\101\021\071\022" +
    "\102\023\072\026\100\027\075\030\103\031\065\032\066" +
    "\034\123\044\070\001\002\000\004\034\063\001\002\000" +
    "\012\011\uffeb\024\uffeb\034\uffeb\037\uffeb\001\002\000\012" +
    "\011\uffed\024\uffed\034\uffed\037\uffed\001\002\000\012\011" +
    "\uffee\024\uffee\034\uffee\037\uffee\001\002\000\024\014\042" +
    "\025\051\033\053\075\045\076\041\077\043\100\040\101" +
    "\052\102\050\001\002\000\054\011\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\034\uffab\035\uffab\040\uffab\041\uffab\044\uffab\001\002\000" +
    "\024\014\042\025\051\033\053\075\045\076\041\077\043" +
    "\100\040\101\052\102\050\001\002\000\024\014\042\025" +
    "\051\033\053\075\045\076\041\077\043\100\040\101\052" +
    "\102\050\001\002\000\024\014\042\025\051\033\053\075" +
    "\045\076\041\077\043\100\040\101\052\102\050\001\002" +
    "\000\024\014\042\025\051\033\053\075\045\076\041\077" +
    "\043\100\040\101\052\102\050\001\002\000\024\014\042" +
    "\025\051\033\053\075\045\076\041\077\043\100\040\101" +
    "\052\102\050\001\002\000\024\014\042\025\051\033\053" +
    "\075\045\076\041\077\043\100\040\101\052\102\050\001" +
    "\002\000\024\014\042\025\051\033\053\075\045\076\041" +
    "\077\043\100\040\101\052\102\050\001\002\000\024\014" +
    "\042\025\051\033\053\075\045\076\041\077\043\100\040" +
    "\101\052\102\050\001\002\000\024\014\042\025\051\033" +
    "\053\075\045\076\041\077\043\100\040\101\052\102\050" +
    "\001\002\000\024\014\042\025\051\033\053\075\045\076" +
    "\041\077\043\100\040\101\052\102\050\001\002\000\024" +
    "\014\042\025\051\033\053\075\045\076\041\077\043\100" +
    "\040\101\052\102\050\001\002\000\024\014\042\025\051" +
    "\033\053\075\045\076\041\077\043\100\040\101\052\102" +
    "\050\001\002\000\024\014\042\025\051\033\053\075\045" +
    "\076\041\077\043\100\040\101\052\102\050\001\002\000" +
    "\024\014\042\025\051\033\053\075\045\076\041\077\043" +
    "\100\040\101\052\102\050\001\002\000\024\014\042\025" +
    "\051\033\053\075\045\076\041\077\043\100\040\101\052" +
    "\102\050\001\002\000\054\011\uffb4\013\074\014\067\015" +
    "\073\016\076\017\077\020\101\021\071\022\102\023\072" +
    "\024\uffb4\026\100\027\075\030\uffb4\031\065\032\066\034" +
    "\uffb4\035\uffb4\040\uffb4\041\uffb4\044\070\001\002\000\054" +
    "\011\uffb9\013\074\014\067\015\073\016\076\017\077\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035\uffb9\040\uffb9\041" +
    "\uffb9\044\070\001\002\000\054\011\uffbc\013\074\014\067" +
    "\015\073\016\076\017\077\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\040\uffbc\041\uffbc\044\070\001\002\000" +
    "\054\011\uffba\013\074\014\067\015\073\016\076\017\077" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\034\uffba\035\uffba\040\uffba" +
    "\041\uffba\044\070\001\002\000\054\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\044\070\001\002" +
    "\000\054\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\040" +
    "\uffc0\041\uffc0\044\070\001\002\000\054\011\uffb8\013\074" +
    "\014\067\015\073\016\076\017\077\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\044\070\001" +
    "\002\000\054\011\uffbe\013\uffbe\014\uffbe\015\073\016\076" +
    "\017\077\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\035\uffbe" +
    "\040\uffbe\041\uffbe\044\070\001\002\000\054\011\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\044\070" +
    "\001\002\000\054\011\uffb7\013\074\014\067\015\073\016" +
    "\076\017\077\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\040\uffb7\041\uffb7\044\070\001\002\000\054\011\uffbb" +
    "\013\074\014\067\015\073\016\076\017\077\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\044" +
    "\070\001\002\000\052\011\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2" +
    "\035\uffc2\040\uffc2\041\uffc2\001\002\000\054\011\uffbd\013" +
    "\uffbd\014\uffbd\015\073\016\076\017\077\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd\044\070" +
    "\001\002\000\054\011\uffb5\013\074\014\067\015\073\016" +
    "\076\017\077\020\101\021\071\022\102\023\072\024\uffb5" +
    "\026\100\027\075\030\uffb5\031\uffb5\032\uffb5\034\uffb5\035" +
    "\uffb5\040\uffb5\041\uffb5\044\070\001\002\000\054\011\uffb3" +
    "\013\074\014\067\015\073\016\076\017\077\020\101\021" +
    "\071\022\102\023\072\024\uffb3\026\100\027\075\030\uffb3" +
    "\031\uffb3\032\066\034\uffb3\035\uffb3\040\uffb3\041\uffb3\044" +
    "\070\001\002\000\054\011\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2" +
    "\035\uffb2\040\uffb2\041\uffb2\044\uffb2\001\002\000\054\011" +
    "\uffb6\013\074\014\067\015\073\016\076\017\077\020\101" +
    "\021\071\022\102\023\072\024\uffb6\026\100\027\075\030" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\040\uffb6\041\uffb6" +
    "\044\070\001\002\000\024\014\042\025\051\033\053\075" +
    "\045\076\041\077\043\100\040\101\052\102\050\001\002" +
    "\000\042\013\074\014\067\015\073\016\076\017\077\020" +
    "\101\021\071\022\102\023\072\026\100\027\075\030\103" +
    "\031\065\032\066\040\127\044\070\001\002\000\056\011" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7\037\130\040\uffc7" +
    "\041\uffc7\044\uffc7\001\002\000\024\014\042\025\051\033" +
    "\053\075\045\076\041\077\043\100\040\101\052\102\050" +
    "\001\002\000\042\013\074\014\067\015\073\016\076\017" +
    "\077\020\101\021\071\022\102\023\072\026\100\027\075" +
    "\030\103\031\065\032\066\040\132\044\070\001\002\000" +
    "\054\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\040\uffc6" +
    "\041\uffc6\044\uffc6\001\002\000\026\014\042\025\051\033" +
    "\053\043\137\075\045\076\041\077\043\100\040\101\052" +
    "\102\050\001\002\000\030\014\uffdc\025\uffdc\033\uffdc\036" +
    "\uffdc\043\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc" +
    "\102\uffdc\001\002\000\030\014\042\025\051\033\053\036" +
    "\153\043\137\075\045\076\041\077\043\100\040\101\052" +
    "\102\050\001\002\000\042\013\074\014\067\015\073\016" +
    "\076\017\077\020\101\021\071\022\102\023\072\024\146" +
    "\026\100\027\075\030\103\031\065\032\066\044\070\001" +
    "\002\000\004\024\140\001\002\000\004\027\141\001\002" +
    "\000\004\035\142\001\002\000\032\003\032\045\025\046" +
    "\016\047\020\051\036\053\011\054\035\055\022\056\031" +
    "\057\007\067\030\102\021\001\002\000\034\003\032\036" +
    "\145\045\025\046\016\047\020\051\036\053\011\054\035" +
    "\055\022\056\031\057\007\067\030\102\021\001\002\000" +
    "\036\002\ufffe\003\ufffe\036\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\067" +
    "\ufffe\102\ufffe\001\002\000\030\014\uffd9\025\uffd9\033\uffd9" +
    "\036\uffd9\043\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\001\002\000\004\027\147\001\002\000\004" +
    "\035\150\001\002\000\032\003\032\045\025\046\016\047" +
    "\020\051\036\053\011\054\035\055\022\056\031\057\007" +
    "\067\030\102\021\001\002\000\034\003\032\036\152\045" +
    "\025\046\016\047\020\051\036\053\011\054\035\055\022" +
    "\056\031\057\007\067\030\102\021\001\002\000\030\014" +
    "\uffda\025\uffda\033\uffda\036\uffda\043\uffda\075\uffda\076\uffda" +
    "\077\uffda\100\uffda\101\uffda\102\uffda\001\002\000\036\002" +
    "\uffdd\003\uffdd\036\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\067\uffdd\102" +
    "\uffdd\001\002\000\030\014\uffdb\025\uffdb\033\uffdb\036\uffdb" +
    "\043\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102" +
    "\uffdb\001\002\000\054\011\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3" +
    "\035\uffc3\040\uffc3\041\uffc3\044\uffc3\001\002\000\004\102" +
    "\157\001\002\000\010\013\177\014\201\024\200\001\002" +
    "\000\024\014\042\025\051\033\053\075\045\076\041\077" +
    "\043\100\040\101\052\102\050\001\002\000\042\011\162" +
    "\013\074\014\067\015\073\016\076\017\077\020\101\021" +
    "\071\022\102\023\072\026\100\027\075\030\103\031\065" +
    "\032\066\044\070\001\002\000\004\102\163\001\002\000" +
    "\010\013\171\014\173\024\172\001\002\000\004\034\165" +
    "\001\002\000\004\035\166\001\002\000\032\003\032\045" +
    "\025\046\016\047\020\051\036\053\011\054\035\055\022" +
    "\056\031\057\007\067\030\102\021\001\002\000\034\003" +
    "\032\036\170\045\025\046\016\047\020\051\036\053\011" +
    "\054\035\055\022\056\031\057\007\067\030\102\021\001" +
    "\002\000\036\002\uffd7\003\uffd7\036\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\051\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\067\uffd7\102\uffd7\001\002\000\004\013\176\001\002" +
    "\000\024\014\042\025\051\033\053\075\045\076\041\077" +
    "\043\100\040\101\052\102\050\001\002\000\004\014\174" +
    "\001\002\000\004\034\uffd4\001\002\000\042\013\074\014" +
    "\067\015\073\016\076\017\077\020\101\021\071\022\102" +
    "\023\072\026\100\027\075\030\103\031\065\032\066\034" +
    "\uffd6\044\070\001\002\000\004\034\uffd5\001\002\000\004" +
    "\013\206\001\002\000\024\014\042\025\051\033\053\075" +
    "\045\076\041\077\043\100\040\101\052\102\050\001\002" +
    "\000\004\014\202\001\002\000\004\011\203\001\002\000" +
    "\056\002\uffe2\003\uffe2\014\uffe2\025\uffe2\033\uffe2\036\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\051\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\067\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\101\uffe2\102\uffe2\001\002\000\042\011\205\013" +
    "\074\014\067\015\073\016\076\017\077\020\101\021\071" +
    "\022\102\023\072\026\100\027\075\030\103\031\065\032" +
    "\066\044\070\001\002\000\056\002\uffe4\003\uffe4\014\uffe4" +
    "\025\uffe4\033\uffe4\036\uffe4\045\uffe4\046\uffe4\047\uffe4\051" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\067\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\001" +
    "\002\000\004\011\207\001\002\000\056\002\uffe3\003\uffe3" +
    "\014\uffe3\025\uffe3\033\uffe3\036\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\051\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\067\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\001\002\000\036\002\ufff3\003\ufff3\036\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\051\ufff3\053\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\067\ufff3\102\ufff3\001\002\000\036\002\uffd2" +
    "\003\uffd2\036\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\067\uffd2\102\uffd2" +
    "\001\002\000\024\014\042\025\051\033\053\075\045\076" +
    "\041\077\043\100\040\101\052\102\050\001\002\000\042" +
    "\013\074\014\067\015\073\016\076\017\077\020\101\021" +
    "\071\022\102\023\072\026\100\027\075\030\103\031\065" +
    "\032\066\034\214\044\070\001\002\000\004\011\215\001" +
    "\002\000\036\002\uffd0\003\uffd0\036\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\051\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057" +
    "\uffd0\067\uffd0\102\uffd0\001\002\000\004\002\001\001\002" +
    "\000\004\012\220\001\002\000\014\004\054\005\062\006" +
    "\061\007\055\010\060\001\002\000\010\011\224\024\222" +
    "\037\223\001\002\000\024\014\042\025\051\033\255\075" +
    "\045\076\041\077\043\100\040\101\052\102\050\001\002" +
    "\000\004\040\225\001\002\000\036\002\uffe9\003\uffe9\036" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\067\uffe9\102\uffe9\001\002\000" +
    "\006\024\226\037\227\001\002\000\004\037\250\001\002" +
    "\000\004\040\230\001\002\000\004\024\231\001\002\000" +
    "\004\037\232\001\002\000\004\037\233\001\002\000\024" +
    "\014\042\025\051\033\053\075\045\076\041\077\043\100" +
    "\040\101\052\102\050\001\002\000\006\040\236\041\235" +
    "\001\002\000\004\037\240\001\002\000\004\011\237\001" +
    "\002\000\036\002\uffcc\003\uffcc\036\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\051\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\067\uffcc\102\uffcc\001\002\000\024\014\042\025\051" +
    "\033\053\075\045\076\041\077\043\100\040\101\052\102" +
    "\050\001\002\000\006\040\244\041\243\001\002\000\044" +
    "\013\074\014\067\015\073\016\076\017\077\020\101\021" +
    "\071\022\102\023\072\026\100\027\075\030\103\031\065" +
    "\032\066\040\uffcb\041\uffcb\044\070\001\002\000\024\014" +
    "\042\025\051\033\053\075\045\076\041\077\043\100\040" +
    "\101\052\102\050\001\002\000\006\040\uffc8\041\uffc8\001" +
    "\002\000\044\013\074\014\067\015\073\016\076\017\077" +
    "\020\101\021\071\022\102\023\072\026\100\027\075\030" +
    "\103\031\065\032\066\040\uffca\041\uffca\044\070\001\002" +
    "\000\006\040\247\041\243\001\002\000\006\040\uffc9\041" +
    "\uffc9\001\002\000\024\014\042\025\051\033\053\075\045" +
    "\076\041\077\043\100\040\101\052\102\050\001\002\000" +
    "\006\040\252\041\243\001\002\000\004\011\253\001\002" +
    "\000\036\002\uffce\003\uffce\036\uffce\045\uffce\046\uffce\047" +
    "\uffce\051\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\067\uffce\102\uffce\001\002\000\042\011\262\013\074\014" +
    "\067\015\073\016\076\017\077\020\101\021\071\022\102" +
    "\023\072\026\100\027\075\030\103\031\065\032\066\044" +
    "\070\001\002\000\036\004\054\005\062\006\061\007\055" +
    "\010\060\014\042\025\051\033\053\075\045\076\041\077" +
    "\043\100\040\101\052\102\050\001\002\000\004\034\257" +
    "\001\002\000\024\014\042\025\051\033\053\075\045\076" +
    "\041\077\043\100\040\101\052\102\050\001\002\000\042" +
    "\011\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\044\uffab\001\002\000\036\002\uffe5\003" +
    "\uffe5\036\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\067\uffe5\102\uffe5\001" +
    "\002\000\036\002\uffe7\003\uffe7\036\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\051\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\067\uffe7\102\uffe7\001\002\000\032\003\032\045\025" +
    "\046\016\047\020\051\036\053\011\054\035\055\022\056" +
    "\031\057\007\067\030\102\021\001\002\000\034\003\032" +
    "\036\265\045\025\046\016\047\020\051\036\053\011\054" +
    "\035\055\022\056\031\057\007\067\030\102\021\001\002" +
    "\000\004\053\266\001\002\000\004\033\267\001\002\000" +
    "\024\014\042\025\051\033\053\075\045\076\041\077\043" +
    "\100\040\101\052\102\050\001\002\000\042\013\074\014" +
    "\067\015\073\016\076\017\077\020\101\021\071\022\102" +
    "\023\072\026\100\027\075\030\103\031\065\032\066\034" +
    "\271\044\070\001\002\000\004\011\272\001\002\000\036" +
    "\002\uffd3\003\uffd3\036\uffd3\045\uffd3\046\uffd3\047\uffd3\051" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\067\uffd3" +
    "\102\uffd3\001\002\000\024\014\042\025\051\033\053\075" +
    "\045\076\041\077\043\100\040\101\052\102\050\001\002" +
    "\000\042\013\074\014\067\015\073\016\076\017\077\020" +
    "\101\021\071\022\102\023\072\026\100\027\075\030\103" +
    "\031\065\032\066\040\275\044\070\001\002\000\006\024" +
    "\276\037\277\001\002\000\024\014\042\025\051\033\053" +
    "\075\045\076\041\077\043\100\040\101\052\102\050\001" +
    "\002\000\024\014\042\025\051\033\053\075\045\076\041" +
    "\077\043\100\040\101\052\102\050\001\002\000\042\013" +
    "\074\014\067\015\073\016\076\017\077\020\101\021\071" +
    "\022\102\023\072\026\100\027\075\030\103\031\065\032" +
    "\066\040\301\044\070\001\002\000\004\024\302\001\002" +
    "\000\024\014\042\025\051\033\053\075\045\076\041\077" +
    "\043\100\040\101\052\102\050\001\002\000\042\011\304" +
    "\013\074\014\067\015\073\016\076\017\077\020\101\021" +
    "\071\022\102\023\072\026\100\027\075\030\103\031\065" +
    "\032\066\044\070\001\002\000\036\002\uffc4\003\uffc4\036" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\067\uffc4\102\uffc4\001\002\000" +
    "\042\011\306\013\074\014\067\015\073\016\076\017\077" +
    "\020\101\021\071\022\102\023\072\026\100\027\075\030" +
    "\103\031\065\032\066\044\070\001\002\000\036\002\uffc5" +
    "\003\uffc5\036\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\067\uffc5\102\uffc5" +
    "\001\002\000\024\014\042\025\051\033\053\075\045\076" +
    "\041\077\043\100\040\101\052\102\050\001\002\000\042" +
    "\013\074\014\067\015\073\016\076\017\077\020\101\021" +
    "\071\022\102\023\072\026\100\027\075\030\103\031\065" +
    "\032\066\034\311\044\070\001\002\000\004\035\312\001" +
    "\002\000\032\003\032\045\025\046\016\047\020\051\036" +
    "\053\011\054\035\055\022\056\031\057\007\067\030\102" +
    "\021\001\002\000\034\003\032\036\314\045\025\046\016" +
    "\047\020\051\036\053\011\054\035\055\022\056\031\057" +
    "\007\067\030\102\021\001\002\000\040\002\uffe1\003\uffe1" +
    "\036\uffe1\045\uffe1\046\uffe1\047\uffe1\050\315\051\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\067\uffe1\102\uffe1" +
    "\001\002\000\006\035\320\047\020\001\002\000\036\002" +
    "\uffe0\003\uffe0\036\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\067\uffe0\102" +
    "\uffe0\001\002\000\036\002\uffde\003\uffde\036\uffde\045\uffde" +
    "\046\uffde\047\uffde\051\uffde\053\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\067\uffde\102\uffde\001\002\000\032\003\032" +
    "\045\025\046\016\047\020\051\036\053\011\054\035\055" +
    "\022\056\031\057\007\067\030\102\021\001\002\000\034" +
    "\003\032\036\322\045\025\046\016\047\020\051\036\053" +
    "\011\054\035\055\022\056\031\057\007\067\030\102\021" +
    "\001\002\000\036\002\uffdf\003\uffdf\036\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\051\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\067\uffdf\102\uffdf\001\002\000\004\012\324\001" +
    "\002\000\014\004\054\005\062\006\061\007\055\010\060" +
    "\001\002\000\010\011\330\024\326\037\327\001\002\000" +
    "\024\014\042\025\051\033\347\075\045\076\041\077\043" +
    "\100\040\101\052\102\050\001\002\000\004\040\331\001" +
    "\002\000\036\002\uffea\003\uffea\036\uffea\045\uffea\046\uffea" +
    "\047\uffea\051\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\067\uffea\102\uffea\001\002\000\006\024\333\037\332" +
    "\001\002\000\004\040\340\001\002\000\004\037\334\001" +
    "\002\000\024\014\042\025\051\033\053\075\045\076\041" +
    "\077\043\100\040\101\052\102\050\001\002\000\006\040" +
    "\336\041\243\001\002\000\004\011\337\001\002\000\036" +
    "\002\uffcf\003\uffcf\036\uffcf\045\uffcf\046\uffcf\047\uffcf\051" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\067\uffcf" +
    "\102\uffcf\001\002\000\004\024\341\001\002\000\004\037" +
    "\342\001\002\000\004\037\233\001\002\000\006\040\344" +
    "\041\235\001\002\000\004\011\345\001\002\000\036\002" +
    "\uffcd\003\uffcd\036\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\067\uffcd\102" +
    "\uffcd\001\002\000\042\011\354\013\074\014\067\015\073" +
    "\016\076\017\077\020\101\021\071\022\102\023\072\026" +
    "\100\027\075\030\103\031\065\032\066\044\070\001\002" +
    "\000\036\004\054\005\062\006\061\007\055\010\060\014" +
    "\042\025\051\033\053\075\045\076\041\077\043\100\040" +
    "\101\052\102\050\001\002\000\004\034\351\001\002\000" +
    "\024\014\042\025\051\033\053\075\045\076\041\077\043" +
    "\100\040\101\052\102\050\001\002\000\042\011\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\044\uffab\001\002\000\036\002\uffe6\003\uffe6\036\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\051\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\067\uffe6\102\uffe6\001\002\000\036" +
    "\002\uffe8\003\uffe8\036\uffe8\045\uffe8\046\uffe8\047\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\067\uffe8" +
    "\102\uffe8\001\002\000\024\014\042\025\051\033\053\075" +
    "\045\076\041\077\043\100\040\101\052\102\050\001\002" +
    "\000\042\013\074\014\067\015\073\016\076\017\077\020" +
    "\101\021\071\022\102\023\072\026\100\027\075\030\103" +
    "\031\065\032\066\034\357\044\070\001\002\000\004\035" +
    "\360\001\002\000\032\003\032\045\025\046\016\047\020" +
    "\051\036\053\011\054\035\055\022\056\031\057\007\067" +
    "\030\102\021\001\002\000\034\003\032\036\362\045\025" +
    "\046\016\047\020\051\036\053\011\054\035\055\022\056" +
    "\031\057\007\067\030\102\021\001\002\000\036\002\uffd8" +
    "\003\uffd8\036\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\067\uffd8\102\uffd8" +
    "\001\002\000\036\002\uffd1\003\uffd1\036\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\051\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\067\uffd1\102\uffd1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\042\002\025\003\013\004\004\006\026\007" +
    "\036\010\016\012\014\015\011\016\023\020\022\021\005" +
    "\022\003\023\007\024\033\025\032\032\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\143\006\026\007\036" +
    "\010\016\012\014\015\011\016\023\020\022\021\005\022" +
    "\003\023\007\024\033\025\032\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\043\031\045\033\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\043\031\045\033\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\043\031\045\033\123" +
    "\001\001\000\002\001\001\000\012\005\056\030\043\031" +
    "\045\033\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\043\031\045" +
    "\033\063\001\001\000\002\001\001\000\010\030\043\031" +
    "\045\033\121\001\001\000\010\030\043\031\045\033\120" +
    "\001\001\000\010\030\043\031\045\033\117\001\001\000" +
    "\010\030\043\031\045\033\116\001\001\000\010\030\043" +
    "\031\045\033\115\001\001\000\010\030\043\031\045\033" +
    "\114\001\001\000\010\030\043\031\045\033\113\001\001" +
    "\000\010\030\043\031\045\033\112\001\001\000\010\030" +
    "\043\031\045\033\111\001\001\000\010\030\043\031\045" +
    "\033\110\001\001\000\010\030\043\031\045\033\107\001" +
    "\001\000\010\030\043\031\045\033\106\001\001\000\010" +
    "\030\043\031\045\033\105\001\001\000\010\030\043\031" +
    "\045\033\104\001\001\000\010\030\043\031\045\033\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\043\031\045\033\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\043\031\045\033\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\134\014\133\030\043\031\045\033" +
    "\135\001\001\000\002\001\001\000\012\014\153\030\043" +
    "\031\045\033\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\142" +
    "\004\004\006\026\007\036\010\016\012\014\015\011\016" +
    "\023\020\022\021\005\022\003\023\007\024\033\025\032" +
    "\032\012\001\001\000\036\004\143\006\026\007\036\010" +
    "\016\012\014\015\011\016\023\020\022\021\005\022\003" +
    "\023\007\024\033\025\032\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\150\004\004\006\026\007\036\010\016\012" +
    "\014\015\011\016\023\020\022\021\005\022\003\023\007" +
    "\024\033\025\032\032\012\001\001\000\036\004\143\006" +
    "\026\007\036\010\016\012\014\015\011\016\023\020\022" +
    "\021\005\022\003\023\007\024\033\025\032\032\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\157\001\001\000\002\001" +
    "\001\000\010\030\043\031\045\033\160\001\001\000\002" +
    "\001\001\000\004\017\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\166\004\004" +
    "\006\026\007\036\010\016\012\014\015\011\016\023\020" +
    "\022\021\005\022\003\023\007\024\033\025\032\032\012" +
    "\001\001\000\036\004\143\006\026\007\036\010\016\012" +
    "\014\015\011\016\023\020\022\021\005\022\003\023\007" +
    "\024\033\025\032\032\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\043\031\045\033\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\043\031\045" +
    "\033\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\043\031\045\033\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\220\001\001\000\002" +
    "\001\001\000\010\030\043\031\045\033\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\233\001\001\000\012\026\245\030\043" +
    "\031\045\033\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\240" +
    "\030\043\031\045\033\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\043\031\045\033\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\250\030\043\031\045\033\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\255\030\043\031\045" +
    "\033\055\001\001\000\002\001\001\000\010\030\043\031" +
    "\045\033\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\263\004\004\006\026\007" +
    "\036\010\016\012\014\015\011\016\023\020\022\021\005" +
    "\022\003\023\007\024\033\025\032\032\012\001\001\000" +
    "\036\004\143\006\026\007\036\010\016\012\014\015\011" +
    "\016\023\020\022\021\005\022\003\023\007\024\033\025" +
    "\032\032\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\043\031\045\033\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\043" +
    "\031\045\033\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\043\031\045\033\304\001\001\000\010" +
    "\030\043\031\045\033\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\043\031\045\033\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\043\031\045\033\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\312\004" +
    "\004\006\026\007\036\010\016\012\014\015\011\016\023" +
    "\020\022\021\005\022\003\023\007\024\033\025\032\032" +
    "\012\001\001\000\036\004\143\006\026\007\036\010\016" +
    "\012\014\015\011\016\023\020\022\021\005\022\003\023" +
    "\007\024\033\025\032\032\012\001\001\000\004\011\315" +
    "\001\001\000\004\010\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\320\004\004\006\026\007\036" +
    "\010\016\012\014\015\011\016\023\020\022\021\005\022" +
    "\003\023\007\024\033\025\032\032\012\001\001\000\036" +
    "\004\143\006\026\007\036\010\016\012\014\015\011\016" +
    "\023\020\022\021\005\022\003\023\007\024\033\025\032" +
    "\032\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\324\001\001\000\002\001\001\000\010\030\043" +
    "\031\045\033\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\334\030\043\031\045\033\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\347\030\043\031\045\033\055\001" +
    "\001\000\002\001\001\000\010\030\043\031\045\033\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\043\031\045\033\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\360\004\004\006" +
    "\026\007\036\010\016\012\014\015\011\016\023\020\022" +
    "\021\005\022\003\023\007\024\033\025\032\032\012\001" +
    "\001\000\036\004\143\006\026\007\036\010\016\012\014" +
    "\015\011\016\023\020\022\021\005\022\003\023\007\024" +
    "\033\025\032\032\012\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //errores
        public ArrayList<Errores> errores = new ArrayList<>();


        public String resultado = ""; 

        public void syntax_error(Symbol s)
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
                errores.add(new Errores("Error Sintactico", "   \""+ s.value +"\"   "+" Recuperado", s.left, s.right));
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        }

        public ArrayList<Errores> getErrores(){
                return errores;
        }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= printConsole 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= declararVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= asignarVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresiones ::= sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresiones ::= sentMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresiones ::= sentWhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresiones ::= sentFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresiones ::= sentDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresiones ::= break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresiones ::= continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresiones ::= error PYC 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresiones ::= vector1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresiones ::= vector2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresiones ::= asignacionVector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoExpresion ::= INT 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipoExpresion ::= DOUBLE 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipoExpresion ::= BOOL 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipoExpresion ::= CHAR 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoExpresion ::= STRING 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null, tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null,tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignarVariables ::= ID IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignarVariables ::= ID MAS MAS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignarVariables ::= ID MENOS MENOS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(exp, inst, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE elseIF 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion elseIf = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, inst, elseIf, expleft, expright);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elseIF ::= ELSE A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Else(inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elseIF ::= ELSE sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentMATCH ::= MATCH expresion A_LLAVE casos C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> c = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Match(exp, c, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentMATCH",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // casos ::= caso 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // casos ::= casos caso 
            {
              LinkedList<Casos> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // caso ::= expresion IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // caso ::= GUION_BAJO IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(new Dato("_", TipoDato.CADENA, instleft, instright), inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentWhile ::= WHILE A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =  new While(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentWhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentFOR ::= FOR A_PARENTESIS asignarVariables expresion PYC updateFOR C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new For(a, exp, b, inst,aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentFOR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // updateFOR ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // updateFOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // updateFOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentDO ::= DO A_LLAVE instruccion C_LLAVE WHILE A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(exp, inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // break ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Break(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // continue ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Continue(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // printConsole ::= PRINTLN A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(val);RESULT= new Println(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printConsole",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // vector1 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vector1 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vector2 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // vector2 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaExpresionesVectores ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaExpresionesVectores ::= listaExpresionesVectores COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaExpresionesVectores2 ::= A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaExpresionesVectores2 ::= listaExpresionesVectores2 COMA A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Expresion>> a = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // accesoVector ::= ID A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoVector(id.toLowerCase(), indice, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // accesoVector2D ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoArreglo2D(id.toLowerCase(), indice1, indice2, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector2D",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos(id.toLowerCase(), indice, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val, "-", null, valleft,valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "**", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "*", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion DIVIDIR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "/", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "%", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "+", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "-", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "==", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "!=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MENOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MAYOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val, null, "!", valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "^", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "||", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "&&", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.INT, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.DOUBLE, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= BOOLEANO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.BOOLEAN, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CADENA, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= CARACTER 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CHAR, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new RecVariable(id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= A_PARENTESIS tipoExpresion C_PARENTESIS expresion 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Casteo(exp, tipo, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= accesoVector2D 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
