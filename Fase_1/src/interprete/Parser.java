
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package interprete;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import instruccion.Instruccion;
import expresiones.Dato;
import expresiones.Aritmeticas;
import expresiones.TipoDato;
import expresiones.Expresion;
import expresiones.Negativo;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.RecVariable;
import funciones.DecVariables;
import funciones.Println;
import funciones.AsignarVariables;
import funciones.IncDec;
import funciones.If;
import funciones.Else;
import funciones.Match;
import funciones.Casos;
import funciones.While;
import funciones.For;
import funciones.DoWhile;
import funciones.Break;
import funciones.Continue;
import excepciones.Errores;
import expresiones.Casteo;
import funciones.DecArreglos;
import funciones.DecArreglos2D;
import expresiones.AccesoVector;
import expresiones.AccesoArreglo2D;
import funciones.AsigArreglos;
import funciones.AsigArreglos2D;
import funciones.DeclaraLista;
import funciones.AddLista;
import funciones.RemoveElementoLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.Find;
import expresiones.ToString;
import funciones.DecStruct;
import funciones.Campo;
import funciones.CampoStruct;
import funciones.InstStruct;
import funciones.ValorStruct;
import expresiones.AccesoCampoStruct;
import funciones.AsignacionCampoStruct;
import funciones.Metodo;
import instruccion.TipoInstruccion;
import entorno.Tipo;
import java.util.HashMap;
import funciones.StartWith;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\055\011\000\002\055\012\000\002\057\006\000\002\057" +
    "\004\000\002\060\010\000\002\060\007\000\002\061\005" +
    "\000\002\061\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\007" +
    "\000\002\006\007\000\002\006\011\000\002\006\011\000" +
    "\002\006\014\000\002\006\014\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\010\011\000\002\010" +
    "\012\000\002\011\006\000\002\011\004\000\002\012\007" +
    "\000\002\013\003\000\002\013\004\000\002\014\010\000" +
    "\002\014\010\000\002\015\011\000\002\016\014\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\013\000\002\021\004\000\002\022\004\000\002\023\007" +
    "\000\002\024\015\000\002\024\015\000\002\025\017\000" +
    "\002\025\017\000\002\026\003\000\002\026\005\000\002" +
    "\027\005\000\002\027\007\000\002\030\006\000\002\031" +
    "\011\000\002\032\011\000\002\032\014\000\002\033\015" +
    "\000\002\035\011\000\002\036\010\000\002\044\010\000" +
    "\002\045\004\000\002\045\003\000\002\046\006\000\002" +
    "\046\006\000\002\047\013\000\002\047\013\000\002\050" +
    "\005\000\002\050\003\000\002\051\005\000\002\052\005" +
    "\000\002\053\010\000\002\040\006\000\002\041\006\000" +
    "\002\043\006\000\002\042\010\000\002\054\004\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\004\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\006\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\054\003\037\004\012\005\010\006\025\007" +
    "\004\010\054\045\021\046\045\047\032\051\016\053\050" +
    "\054\015\055\060\056\043\057\011\061\052\065\056\066" +
    "\044\067\014\074\047\102\033\001\002\000\004\102\uffdc" +
    "\001\002\000\060\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\036\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\051\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\061" +
    "\ufff0\065\ufff0\066\ufff0\067\ufff0\074\ufff0\102\ufff0\001\002" +
    "\000\060\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\036\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\061\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\074\ufff4\102\ufff4\001\002\000\060" +
    "\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\036\ufff7\045\ufff7\046\ufff7\047\ufff7\051\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\061\ufff7\065\ufff7\066" +
    "\ufff7\067\ufff7\074\ufff7\102\ufff7\001\002\000\004\102\uffde" +
    "\001\002\000\004\011\u016d\001\002\000\004\102\uffdf\001" +
    "\002\000\060\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\036\uffff\045\uffff\046\uffff\047\uffff\051" +
    "\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\061\uffff" +
    "\065\uffff\066\uffff\067\uffff\074\uffff\102\uffff\001\002\000" +
    "\004\033\u0169\001\002\000\004\033\u0158\001\002\000\032" +
    "\014\067\025\075\033\111\070\106\071\110\072\101\075" +
    "\113\076\073\077\077\100\071\101\105\102\100\001\002" +
    "\000\060\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\036\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\061\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\074\ufffd\102\ufffd\001\002\000\004" +
    "\002\u0145\001\002\000\004\102\u0125\001\002\000\060\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\036\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\061\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\074\ufff9\102\ufff9\001\002\000\060\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\036\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\057\ufffb\061\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\074\ufffb\102\ufffb\001\002\000\060\002\ufffc\003\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\036\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\051\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\061\ufffc\065\ufffc\066\ufffc\067\ufffc\074\ufffc" +
    "\102\ufffc\001\002\000\004\102\uffdd\001\002\000\060\002" +
    "\ufff2\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\036\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\061\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\074\ufff2\102\ufff2\001\002\000\060\002\ufff3\003" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\036\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\051\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\061\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\074\ufff3\102\ufff3\001\002\000\060\002\ufff6\003\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\036\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\061\ufff6\065\ufff6\066\ufff6\067\ufff6\074\ufff6" +
    "\102\ufff6\001\002\000\060\002\uffec\003\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\036\uffec\045\uffec\046\uffec" +
    "\047\uffec\051\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\061\uffec\065\uffec\066\uffec\067\uffec\074\uffec\102\uffec" +
    "\001\002\000\004\033\u0119\001\002\000\014\013\373\014" +
    "\376\024\374\037\375\042\372\001\002\000\056\002\000" +
    "\003\037\004\012\005\010\006\025\007\004\010\054\045" +
    "\021\046\045\047\032\051\016\053\050\054\015\055\060" +
    "\056\043\057\011\061\052\065\056\066\044\067\014\074" +
    "\047\102\033\001\002\000\060\002\ufff8\003\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\036\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\051\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\061\ufff8\065\ufff8\066\ufff8\067\ufff8\074\ufff8\102" +
    "\ufff8\001\002\000\060\002\ufff5\003\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\036\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\061\ufff5\065\ufff5\066\ufff5\067\ufff5\074\ufff5\102\ufff5\001" +
    "\002\000\004\011\371\001\002\000\004\102\351\001\002" +
    "\000\060\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\036\uffef\045\uffef\046\uffef\047\uffef\051\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\061\uffef\065" +
    "\uffef\066\uffef\067\uffef\074\uffef\102\uffef\001\002\000\060" +
    "\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\036\uffeb\045\uffeb\046\uffeb\047\uffeb\051\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\061\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\074\uffeb\102\uffeb\001\002\000\004\011\350" +
    "\001\002\000\004\102\uffe0\001\002\000\004\102\270\001" +
    "\002\000\060\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\036\ufff1\045\ufff1\046\ufff1\047\ufff1\051" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\061\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\074\ufff1\102\ufff1\001\002\000" +
    "\004\102\256\001\002\000\004\033\250\001\002\000\060" +
    "\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\036\uffed\045\uffed\046\uffed\047\uffed\051\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\061\uffed\065\uffed\066" +
    "\uffed\067\uffed\074\uffed\102\uffed\001\002\000\004\026\236" +
    "\001\002\000\060\002\uffea\003\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\036\uffea\045\uffea\046\uffea\047\uffea" +
    "\051\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\061" +
    "\uffea\065\uffea\066\uffea\067\uffea\074\uffea\102\uffea\001\002" +
    "\000\004\102\uffdb\001\002\000\060\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\036\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\061\ufffa\065\ufffa\066\ufffa\067\ufffa\074\ufffa" +
    "\102\ufffa\001\002\000\004\035\221\001\002\000\060\002" +
    "\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\036\uffee\045\uffee\046\uffee\047\uffee\051\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\061\uffee\065\uffee\066\uffee" +
    "\067\uffee\074\uffee\102\uffee\001\002\000\004\035\061\001" +
    "\002\000\054\003\037\004\012\005\010\006\025\007\004" +
    "\010\054\045\021\046\045\047\032\051\016\053\050\054" +
    "\015\055\060\056\043\057\011\061\052\065\056\066\044" +
    "\067\014\074\047\102\033\001\002\000\056\003\037\004" +
    "\012\005\010\006\025\007\004\010\054\036\064\045\021" +
    "\046\045\047\032\051\016\053\050\054\015\055\060\056" +
    "\043\057\011\061\052\065\056\066\044\067\014\074\047" +
    "\102\033\001\002\000\060\002\ufffe\003\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\036\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\061\ufffe\065\ufffe\066\ufffe\067\ufffe\074\ufffe\102\ufffe" +
    "\001\002\000\004\053\065\001\002\000\004\033\066\001" +
    "\002\000\032\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\056\011\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b" +
    "\034\uff7b\035\uff7b\036\uff7b\040\uff7b\041\uff7b\044\uff7b\001" +
    "\002\000\056\011\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\034\uff86\035\uff86" +
    "\036\uff86\040\uff86\041\uff86\044\uff86\001\002\000\056\011" +
    "\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82" +
    "\021\uff82\022\uff82\023\uff82\024\uff82\026\uff82\027\uff82\030" +
    "\uff82\031\uff82\032\uff82\034\uff82\035\uff82\036\uff82\040\uff82" +
    "\041\uff82\044\uff82\001\002\000\056\011\uff88\013\uff88\014" +
    "\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88" +
    "\023\uff88\024\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\034\uff88\035\uff88\036\uff88\040\uff88\041\uff88\044\uff88" +
    "\001\002\000\042\013\134\014\127\015\133\016\136\017" +
    "\140\020\141\021\131\022\142\023\132\026\137\027\135" +
    "\030\143\031\125\032\126\034\216\044\130\001\002\000" +
    "\032\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\056\011\uff80\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\026" +
    "\uff80\027\uff80\030\uff80\031\uff80\032\uff80\034\uff80\035\uff80" +
    "\036\uff80\040\uff80\041\uff80\044\uff80\001\002\000\056\011" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\026\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\034\uff87\035\uff87\036\uff87\040\uff87" +
    "\041\uff87\044\uff87\001\002\000\062\011\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\034\uff84\035\uff84\036\uff84\037\176\040\uff84\041\uff84" +
    "\042\175\044\uff84\001\002\000\004\033\172\001\002\000" +
    "\056\011\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d" +
    "\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\026\uff7d\027" +
    "\uff7d\030\uff7d\031\uff7d\032\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\040\uff7d\041\uff7d\044\uff7d\001\002\000\056\011\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\034\uff81\035\uff81\036\uff81\040\uff81\041\uff81" +
    "\044\uff81\001\002\000\056\011\uff7e\013\uff7e\014\uff7e\015" +
    "\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\040\uff7e\041\uff7e\044\uff7e\001\002" +
    "\000\056\011\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\034\uff85\035\uff85\036" +
    "\uff85\040\uff85\041\uff85\044\uff85\001\002\000\004\033\167" +
    "\001\002\000\056\011\uff7f\013\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\040\uff7f\041\uff7f\044\uff7f\001\002\000\004" +
    "\033\164\001\002\000\044\004\114\005\122\006\121\007" +
    "\115\010\120\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\056\011\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c" +
    "\035\uff7c\036\uff7c\040\uff7c\041\uff7c\044\uff7c\001\002\000" +
    "\056\011\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\034\uff89\035\uff89\036\uff89" +
    "\040\uff89\041\uff89\044\uff89\001\002\000\014\011\uffda\024" +
    "\uffda\027\uffda\034\uffda\037\uffda\001\002\000\014\011\uffd7" +
    "\024\uffd7\027\uffd7\034\uffd7\037\uffd7\001\002\000\042\013" +
    "\134\014\127\015\133\016\136\017\140\020\141\021\131" +
    "\022\142\023\132\026\137\027\135\030\143\031\125\032" +
    "\126\034\163\044\130\001\002\000\004\034\123\001\002" +
    "\000\014\011\uffd6\024\uffd6\027\uffd6\034\uffd6\037\uffd6\001" +
    "\002\000\014\011\uffd8\024\uffd8\027\uffd8\034\uffd8\037\uffd8" +
    "\001\002\000\014\011\uffd9\024\uffd9\027\uffd9\034\uffd9\037" +
    "\uffd9\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\056\011\uff83\013\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\024\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83" +
    "\034\uff83\035\uff83\036\uff83\040\uff83\041\uff83\044\uff83\001" +
    "\002\000\032\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\032\014\067\025\075\033\111" +
    "\070\106\071\110\072\101\075\113\076\073\077\077\100" +
    "\071\101\105\102\100\001\002\000\032\014\067\025\075" +
    "\033\111\070\106\071\110\072\101\075\113\076\073\077" +
    "\077\100\071\101\105\102\100\001\002\000\032\014\067" +
    "\025\075\033\111\070\106\071\110\072\101\075\113\076" +
    "\073\077\077\100\071\101\105\102\100\001\002\000\032" +
    "\014\067\025\075\033\111\070\106\071\110\072\101\075" +
    "\113\076\073\077\077\100\071\101\105\102\100\001\002" +
    "\000\032\014\067\025\075\033\111\070\106\071\110\072" +
    "\101\075\113\076\073\077\077\100\071\101\105\102\100" +
    "\001\002\000\032\014\067\025\075\033\111\070\106\071" +
    "\110\072\101\075\113\076\073\077\077\100\071\101\105" +
    "\102\100\001\002\000\032\014\067\025\075\033\111\070" +
    "\106\071\110\072\101\075\113\076\073\077\077\100\071" +
    "\101\105\102\100\001\002\000\032\014\067\025\075\033" +
    "\111\070\106\071\110\072\101\075\113\076\073\077\077" +
    "\100\071\101\105\102\100\001\002\000\032\014\067\025" +
    "\075\033\111\070\106\071\110\072\101\075\113\076\073" +
    "\077\077\100\071\101\105\102\100\001\002\000\032\014" +
    "\067\025\075\033\111\070\106\071\110\072\101\075\113" +
    "\076\073\077\077\100\071\101\105\102\100\001\002\000" +
    "\032\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\032\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\056\011\uff8c\013\134\014\127" +
    "\015\133\016\136\017\140\020\141\021\131\022\142\023" +
    "\132\024\uff8c\026\137\027\135\030\uff8c\031\125\032\126" +
    "\034\uff8c\035\uff8c\036\uff8c\040\uff8c\041\uff8c\044\130\001" +
    "\002\000\056\011\uff91\013\134\014\127\015\133\016\136" +
    "\017\140\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\026" +
    "\uff91\027\uff91\030\uff91\031\uff91\032\uff91\034\uff91\035\uff91" +
    "\036\uff91\040\uff91\041\uff91\044\130\001\002\000\056\011" +
    "\uff94\013\134\014\127\015\133\016\136\017\140\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\026\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\034\uff94\035\uff94\036\uff94\040\uff94" +
    "\041\uff94\044\130\001\002\000\056\011\uff97\013\uff97\014" +
    "\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97" +
    "\023\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\034\uff97\035\uff97\036\uff97\040\uff97\041\uff97\044\130" +
    "\001\002\000\056\011\uff92\013\134\014\127\015\133\016" +
    "\136\017\140\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\034\uff92\035" +
    "\uff92\036\uff92\040\uff92\041\uff92\044\130\001\002\000\056" +
    "\011\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\uff98\024\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\034\uff98\035\uff98\036\uff98\040" +
    "\uff98\041\uff98\044\130\001\002\000\056\011\uff90\013\134" +
    "\014\127\015\133\016\136\017\140\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\034\uff90\035\uff90\036\uff90\040\uff90\041\uff90\044" +
    "\130\001\002\000\056\011\uff96\013\uff96\014\uff96\015\133" +
    "\016\136\017\140\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\034\uff96" +
    "\035\uff96\036\uff96\040\uff96\041\uff96\044\130\001\002\000" +
    "\056\011\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\034\uff99\035\uff99\036\uff99" +
    "\040\uff99\041\uff99\044\130\001\002\000\056\011\uff8f\013" +
    "\134\014\127\015\133\016\136\017\140\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\041\uff8f" +
    "\044\130\001\002\000\056\011\uff93\013\134\014\127\015" +
    "\133\016\136\017\140\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\034" +
    "\uff93\035\uff93\036\uff93\040\uff93\041\uff93\044\130\001\002" +
    "\000\054\011\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\040\uff9a\041\uff9a\001\002\000\056\011\uff95\013\uff95" +
    "\014\uff95\015\133\016\136\017\140\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\034\uff95\035\uff95\036\uff95\040\uff95\041\uff95\044" +
    "\130\001\002\000\056\011\uff8d\013\134\014\127\015\133" +
    "\016\136\017\140\020\141\021\131\022\142\023\132\024" +
    "\uff8d\026\137\027\135\030\uff8d\031\uff8d\032\uff8d\034\uff8d" +
    "\035\uff8d\036\uff8d\040\uff8d\041\uff8d\044\130\001\002\000" +
    "\056\011\uff8b\013\134\014\127\015\133\016\136\017\140" +
    "\020\141\021\131\022\142\023\132\024\uff8b\026\137\027" +
    "\135\030\uff8b\031\uff8b\032\126\034\uff8b\035\uff8b\036\uff8b" +
    "\040\uff8b\041\uff8b\044\130\001\002\000\056\011\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\026\uff8a\027\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\034\uff8a\035\uff8a\036\uff8a\040\uff8a\041\uff8a" +
    "\044\uff8a\001\002\000\032\014\067\025\075\033\111\070" +
    "\106\071\110\072\101\075\113\076\073\077\077\100\071" +
    "\101\105\102\100\001\002\000\042\013\134\014\127\015" +
    "\133\016\136\017\140\020\141\021\131\022\142\023\132" +
    "\026\137\027\135\030\143\031\125\032\126\034\166\044" +
    "\130\001\002\000\056\011\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\040\uff9e\041\uff9e\044\uff9e\001\002\000" +
    "\032\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\042\013\134\014\127\015\133\016\136\017\140" +
    "\020\141\021\131\022\142\023\132\026\137\027\135\030" +
    "\143\031\125\032\126\034\171\044\130\001\002\000\056" +
    "\011\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\034\uff9f\035\uff9f\036\uff9f\040" +
    "\uff9f\041\uff9f\044\uff9f\001\002\000\032\014\067\025\075" +
    "\033\111\070\106\071\110\072\101\075\113\076\073\077" +
    "\077\100\071\101\105\102\100\001\002\000\042\013\134" +
    "\014\127\015\133\016\136\017\140\020\141\021\131\022" +
    "\142\023\132\026\137\027\135\030\143\031\125\032\126" +
    "\034\174\044\130\001\002\000\056\011\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\040\uff9d\041\uff9d\044\uff9d" +
    "\001\002\000\010\064\206\073\205\102\204\001\002\000" +
    "\032\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\042\013\134\014\127\015\133\016\136\017\140" +
    "\020\141\021\131\022\142\023\132\026\137\027\135\030" +
    "\143\031\125\032\126\040\200\044\130\001\002\000\060" +
    "\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\201\040\uffb2\041\uffb2\044\uffb2\001\002\000\032\014\067" +
    "\025\075\033\111\070\106\071\110\072\101\075\113\076" +
    "\073\077\077\100\071\101\105\102\100\001\002\000\042" +
    "\013\134\014\127\015\133\016\136\017\140\020\141\021" +
    "\131\022\142\023\132\026\137\027\135\030\143\031\125" +
    "\032\126\040\203\044\130\001\002\000\056\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041\uffb1" +
    "\044\uffb1\001\002\000\056\011\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1\044\uffa1\001\002" +
    "\000\004\033\212\001\002\000\004\033\207\001\002\000" +
    "\032\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\042\013\134\014\127\015\133\016\136\017\140" +
    "\020\141\021\131\022\142\023\132\026\137\027\135\030" +
    "\143\031\125\032\126\034\211\044\130\001\002\000\056" +
    "\011\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\034\uffac\035\uffac\036\uffac\040" +
    "\uffac\041\uffac\044\uffac\001\002\000\032\014\067\025\075" +
    "\033\111\070\106\071\110\072\101\075\113\076\073\077" +
    "\077\100\071\101\105\102\100\001\002\000\042\013\134" +
    "\014\127\015\133\016\136\017\140\020\141\021\131\022" +
    "\142\023\132\026\137\027\135\030\143\031\125\032\126" +
    "\034\214\044\130\001\002\000\056\011\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\040\uff9c\041\uff9c\044\uff9c" +
    "\001\002\000\056\011\uff8e\013\134\014\127\015\133\016" +
    "\136\017\140\020\141\021\131\022\142\023\132\024\uff8e" +
    "\026\137\027\135\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\040\uff8e\041\uff8e\044\130\001\002\000\004" +
    "\011\217\001\002\000\060\002\uffbe\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\036\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\061\uffbe\065\uffbe\066\uffbe\067\uffbe\074\uffbe\102\uffbe" +
    "\001\002\000\056\011\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\040\uff9b\041\uff9b\044\uff9b\001\002\000\004" +
    "\102\222\001\002\000\004\012\231\001\002\000\006\036" +
    "\225\102\222\001\002\000\006\036\uffa9\102\uffa9\001\002" +
    "\000\004\102\227\001\002\000\006\036\uffaa\102\uffaa\001" +
    "\002\000\004\011\230\001\002\000\060\002\uffab\003\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\036\uffab\045" +
    "\uffab\046\uffab\047\uffab\051\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\061\uffab\065\uffab\066\uffab\067\uffab\074" +
    "\uffab\102\uffab\001\002\000\016\004\114\005\122\006\121" +
    "\007\115\010\120\102\232\001\002\000\004\011\235\001" +
    "\002\000\004\011\234\001\002\000\006\036\uffa8\102\uffa8" +
    "\001\002\000\006\036\uffa7\102\uffa7\001\002\000\014\004" +
    "\114\005\122\006\121\007\115\010\120\001\002\000\004" +
    "\027\240\001\002\000\004\102\241\001\002\000\004\024" +
    "\242\001\002\000\004\062\243\001\002\000\004\061\244" +
    "\001\002\000\004\033\245\001\002\000\004\034\246\001" +
    "\002\000\004\011\247\001\002\000\060\002\uffae\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\036\uffae\045" +
    "\uffae\046\uffae\047\uffae\051\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\057\uffae\061\uffae\065\uffae\066\uffae\067\uffae\074" +
    "\uffae\102\uffae\001\002\000\032\014\067\025\075\033\111" +
    "\070\106\071\110\072\101\075\113\076\073\077\077\100" +
    "\071\101\105\102\100\001\002\000\042\013\134\014\127" +
    "\015\133\016\136\017\140\020\141\021\131\022\142\023" +
    "\132\026\137\027\135\030\143\031\125\032\126\034\252" +
    "\044\130\001\002\000\004\035\253\001\002\000\054\003" +
    "\037\004\012\005\010\006\025\007\004\010\054\045\021" +
    "\046\045\047\032\051\016\053\050\054\015\055\060\056" +
    "\043\057\011\061\052\065\056\066\044\067\014\074\047" +
    "\102\033\001\002\000\056\003\037\004\012\005\010\006" +
    "\025\007\004\010\054\036\255\045\021\046\045\047\032" +
    "\051\016\053\050\054\015\055\060\056\043\057\011\061" +
    "\052\065\056\066\044\067\014\074\047\102\033\001\002" +
    "\000\060\002\uffc3\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\036\uffc3\045\uffc3\046\uffc3\047\uffc3\051\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\061\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\074\uffc3\102\uffc3\001\002\000\004" +
    "\033\257\001\002\000\034\014\067\025\075\033\111\034" +
    "\260\070\106\071\110\072\101\075\113\076\073\077\077" +
    "\100\071\101\105\102\100\001\002\000\004\011\267\001" +
    "\002\000\044\013\134\014\127\015\133\016\136\017\140" +
    "\020\141\021\131\022\142\023\132\026\137\027\135\030" +
    "\143\031\125\032\126\034\uffe1\041\uffe1\044\130\001\002" +
    "\000\006\034\264\041\263\001\002\000\032\014\067\025" +
    "\075\033\111\070\106\071\110\072\101\075\113\076\073" +
    "\077\077\100\071\101\105\102\100\001\002\000\004\011" +
    "\265\001\002\000\060\002\uffe4\003\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\036\uffe4\045\uffe4\046\uffe4\047" +
    "\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\061\uffe4\065\uffe4\066\uffe4\067\uffe4\074\uffe4\102\uffe4\001" +
    "\002\000\044\013\134\014\127\015\133\016\136\017\140" +
    "\020\141\021\131\022\142\023\132\026\137\027\135\030" +
    "\143\031\125\032\126\034\uffe2\041\uffe2\044\130\001\002" +
    "\000\060\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\036\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\074\uffe3\102\uffe3\001\002\000\004" +
    "\012\271\001\002\000\016\004\114\005\122\006\121\007" +
    "\115\010\120\102\272\001\002\000\004\024\335\001\002" +
    "\000\010\011\276\024\274\037\275\001\002\000\032\014" +
    "\067\025\075\033\327\070\106\071\110\072\101\075\113" +
    "\076\073\077\077\100\071\101\105\102\100\001\002\000" +
    "\004\040\277\001\002\000\060\002\uffd5\003\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\036\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\061\uffd5\065\uffd5\066\uffd5\067\uffd5\074\uffd5\102" +
    "\uffd5\001\002\000\006\024\301\037\300\001\002\000\004" +
    "\040\311\001\002\000\004\037\302\001\002\000\032\014" +
    "\067\025\075\033\111\070\106\071\110\072\101\075\113" +
    "\076\073\077\077\100\071\101\105\102\100\001\002\000" +
    "\006\040\306\041\305\001\002\000\044\013\134\014\127" +
    "\015\133\016\136\017\140\020\141\021\131\022\142\023" +
    "\132\026\137\027\135\030\143\031\125\032\126\040\uffb6" +
    "\041\uffb6\044\130\001\002\000\032\014\067\025\075\033" +
    "\111\070\106\071\110\072\101\075\113\076\073\077\077" +
    "\100\071\101\105\102\100\001\002\000\004\011\307\001" +
    "\002\000\060\002\uffba\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\036\uffba\045\uffba\046\uffba\047\uffba\051" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\061\uffba" +
    "\065\uffba\066\uffba\067\uffba\074\uffba\102\uffba\001\002\000" +
    "\044\013\134\014\127\015\133\016\136\017\140\020\141" +
    "\021\131\022\142\023\132\026\137\027\135\030\143\031" +
    "\125\032\126\040\uffb5\041\uffb5\044\130\001\002\000\004" +
    "\024\312\001\002\000\004\037\313\001\002\000\004\037" +
    "\314\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\006\040\317\041\316\001\002" +
    "\000\004\037\321\001\002\000\004\011\320\001\002\000" +
    "\060\002\uffb8\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\036\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\061\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\074\uffb8\102\uffb8\001\002\000\032\014" +
    "\067\025\075\033\111\070\106\071\110\072\101\075\113" +
    "\076\073\077\077\100\071\101\105\102\100\001\002\000" +
    "\006\040\323\041\305\001\002\000\006\040\uffb3\041\uffb3" +
    "\001\002\000\006\040\325\041\305\001\002\000\006\040" +
    "\uffb4\041\uffb4\001\002\000\042\011\334\013\134\014\127" +
    "\015\133\016\136\017\140\020\141\021\131\022\142\023" +
    "\132\026\137\027\135\030\143\031\125\032\126\044\130" +
    "\001\002\000\044\004\114\005\122\006\121\007\115\010" +
    "\120\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\004\034\331\001\002\000\032\014\067\025\075" +
    "\033\111\070\106\071\110\072\101\075\113\076\073\077" +
    "\077\100\071\101\105\102\100\001\002\000\042\011\uff83" +
    "\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\044\uff83\001\002\000\060\002\uffd1\003\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\036\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\051\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\061\uffd1\065\uffd1\066\uffd1\067\uffd1\074\uffd1" +
    "\102\uffd1\001\002\000\060\002\uffd3\003\uffd3\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\036\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\051\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\061\uffd3\065\uffd3\066\uffd3\067\uffd3\074\uffd3\102\uffd3" +
    "\001\002\000\004\035\336\001\002\000\004\102\337\001" +
    "\002\000\004\012\346\001\002\000\006\036\uffa3\041\uffa3" +
    "\001\002\000\006\036\342\041\343\001\002\000\004\011" +
    "\345\001\002\000\004\102\337\001\002\000\006\036\uffa4" +
    "\041\uffa4\001\002\000\060\002\uffa6\003\uffa6\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\036\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\051\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\061\uffa6\065\uffa6\066\uffa6\067\uffa6\074\uffa6\102\uffa6" +
    "\001\002\000\032\014\067\025\075\033\111\070\106\071" +
    "\110\072\101\075\113\076\073\077\077\100\071\101\105" +
    "\102\100\001\002\000\044\013\134\014\127\015\133\016" +
    "\136\017\140\020\141\021\131\022\142\023\132\026\137" +
    "\027\135\030\143\031\125\032\126\036\uffa2\041\uffa2\044" +
    "\130\001\002\000\060\002\uffbd\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\036\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\061\uffbd\065\uffbd\066\uffbd\067\uffbd\074\uffbd\102\uffbd\001" +
    "\002\000\004\033\352\001\002\000\020\004\012\005\010" +
    "\006\025\007\004\010\054\034\355\066\044\001\002\000" +
    "\006\034\363\041\362\001\002\000\004\102\361\001\002" +
    "\000\004\035\356\001\002\000\054\003\037\004\012\005" +
    "\010\006\025\007\004\010\054\045\021\046\045\047\032" +
    "\051\016\053\050\054\015\055\060\056\043\057\011\061" +
    "\052\065\056\066\044\067\014\074\047\102\033\001\002" +
    "\000\056\003\037\004\012\005\010\006\025\007\004\010" +
    "\054\036\360\045\021\046\045\047\032\051\016\053\050" +
    "\054\015\055\060\056\043\057\011\061\052\065\056\066" +
    "\044\067\014\074\047\102\033\001\002\000\060\002\uffe8" +
    "\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\036" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\061\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\074\uffe8\102\uffe8\001\002\000\006\034\uffe5\041\uffe5" +
    "\001\002\000\016\004\012\005\010\006\025\007\004\010" +
    "\054\066\044\001\002\000\004\035\364\001\002\000\054" +
    "\003\037\004\012\005\010\006\025\007\004\010\054\045" +
    "\021\046\045\047\032\051\016\053\050\054\015\055\060" +
    "\056\043\057\011\061\052\065\056\066\044\067\014\074" +
    "\047\102\033\001\002\000\056\003\037\004\012\005\010" +
    "\006\025\007\004\010\054\036\366\045\021\046\045\047" +
    "\032\051\016\053\050\054\015\055\060\056\043\057\011" +
    "\061\052\065\056\066\044\067\014\074\047\102\033\001" +
    "\002\000\060\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\036\uffe7\045\uffe7\046\uffe7\047\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\061\uffe7" +
    "\065\uffe7\066\uffe7\067\uffe7\074\uffe7\102\uffe7\001\002\000" +
    "\004\102\370\001\002\000\006\034\uffe6\041\uffe6\001\002" +
    "\000\060\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\036\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\061\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\074\uffe9\102\uffe9\001\002\000\006" +
    "\063\u0111\102\u0110\001\002\000\004\013\u010e\001\002\000" +
    "\032\014\067\025\075\033\111\070\106\071\110\072\101" +
    "\075\113\076\073\077\077\100\071\101\105\102\100\001" +
    "\002\000\032\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\004\014\377\001\002\000\004\011\u0100" +
    "\001\002\000\106\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\014\uffcd\025\uffcd\033\uffcd\036\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\051\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\061\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\071\uffcd\072\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\100\uffcd\101\uffcd\102\uffcd\001\002\000\042\013\134" +
    "\014\127\015\133\016\136\017\140\020\141\021\131\022" +
    "\142\023\132\026\137\027\135\030\143\031\125\032\126" +
    "\040\u0102\044\130\001\002\000\006\024\u0104\037\u0103\001" +
    "\002\000\032\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\042\011\u0106\013\134\014\127" +
    "\015\133\016\136\017\140\020\141\021\131\022\142\023" +
    "\132\026\137\027\135\030\143\031\125\032\126\044\130" +
    "\001\002\000\060\002\uffb0\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\036\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\061" +
    "\uffb0\065\uffb0\066\uffb0\067\uffb0\074\uffb0\102\uffb0\001\002" +
    "\000\042\013\134\014\127\015\133\016\136\017\140\020" +
    "\141\021\131\022\142\023\132\026\137\027\135\030\143" +
    "\031\125\032\126\040\u0108\044\130\001\002\000\004\024" +
    "\u0109\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\042\011\u010b\013\134\014\127" +
    "\015\133\016\136\017\140\020\141\021\131\022\142\023" +
    "\132\026\137\027\135\030\143\031\125\032\126\044\130" +
    "\001\002\000\060\002\uffaf\003\uffaf\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\036\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\061" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\074\uffaf\102\uffaf\001\002" +
    "\000\042\011\u010d\013\134\014\127\015\133\016\136\017" +
    "\140\020\141\021\131\022\142\023\132\026\137\027\135" +
    "\030\143\031\125\032\126\044\130\001\002\000\106\002" +
    "\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\014\uffcf\025\uffcf\033\uffcf\036\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\061\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\001\002\000\004\011\u010f\001\002\000\106\002" +
    "\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\014\uffce\025\uffce\033\uffce\036\uffce\045\uffce\046\uffce\047" +
    "\uffce\051\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\061\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\001\002\000\004\024\u0116\001\002\000\004\033" +
    "\u0112\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\042\013\134\014\127\015\133" +
    "\016\136\017\140\020\141\021\131\022\142\023\132\026" +
    "\137\027\135\030\143\031\125\032\126\034\u0114\044\130" +
    "\001\002\000\004\011\u0115\001\002\000\060\002\uffad\003" +
    "\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\036\uffad" +
    "\045\uffad\046\uffad\047\uffad\051\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\057\uffad\061\uffad\065\uffad\066\uffad\067\uffad" +
    "\074\uffad\102\uffad\001\002\000\032\014\067\025\075\033" +
    "\111\070\106\071\110\072\101\075\113\076\073\077\077" +
    "\100\071\101\105\102\100\001\002\000\042\011\u0118\013" +
    "\134\014\127\015\133\016\136\017\140\020\141\021\131" +
    "\022\142\023\132\026\137\027\135\030\143\031\125\032" +
    "\126\044\130\001\002\000\060\002\uffa0\003\uffa0\004\uffa0" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\036\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\051\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\061\uffa0\065\uffa0\066\uffa0\067\uffa0\074\uffa0\102" +
    "\uffa0\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\042\013\134\014\127\015\133" +
    "\016\136\017\140\020\141\021\131\022\142\023\132\026" +
    "\137\027\135\030\143\031\125\032\126\034\u011b\044\130" +
    "\001\002\000\004\035\u011c\001\002\000\054\003\037\004" +
    "\012\005\010\006\025\007\004\010\054\045\021\046\045" +
    "\047\032\051\016\053\050\054\015\055\060\056\043\057" +
    "\011\061\052\065\056\066\044\067\014\074\047\102\033" +
    "\001\002\000\056\003\037\004\012\005\010\006\025\007" +
    "\004\010\054\036\u011e\045\021\046\045\047\032\051\016" +
    "\053\050\054\015\055\060\056\043\057\011\061\052\065" +
    "\056\066\044\067\014\074\047\102\033\001\002\000\062" +
    "\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\036\uffcc\045\uffcc\046\uffcc\047\uffcc\050\u011f\051\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\061\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\074\uffcc\102\uffcc\001\002\000\006" +
    "\035\u0122\047\032\001\002\000\060\002\uffcb\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\036\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\061\uffcb\065\uffcb\066\uffcb\067\uffcb\074\uffcb" +
    "\102\uffcb\001\002\000\060\002\uffc9\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\036\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\051\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\061\uffc9\065\uffc9\066\uffc9\067\uffc9\074\uffc9\102\uffc9" +
    "\001\002\000\054\003\037\004\012\005\010\006\025\007" +
    "\004\010\054\045\021\046\045\047\032\051\016\053\050" +
    "\054\015\055\060\056\043\057\011\061\052\065\056\066" +
    "\044\067\014\074\047\102\033\001\002\000\056\003\037" +
    "\004\012\005\010\006\025\007\004\010\054\036\u0124\045" +
    "\021\046\045\047\032\051\016\053\050\054\015\055\060" +
    "\056\043\057\011\061\052\065\056\066\044\067\014\074" +
    "\047\102\033\001\002\000\060\002\uffca\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\036\uffca\045\uffca\046" +
    "\uffca\047\uffca\051\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\061\uffca\065\uffca\066\uffca\067\uffca\074\uffca\102" +
    "\uffca\001\002\000\004\012\u0126\001\002\000\016\004\114" +
    "\005\122\006\121\007\115\010\120\102\u0127\001\002\000" +
    "\004\024\u0140\001\002\000\010\011\u012b\024\u0129\037\u012a" +
    "\001\002\000\032\014\067\025\075\033\u013a\070\106\071" +
    "\110\072\101\075\113\076\073\077\077\100\071\101\105" +
    "\102\100\001\002\000\004\040\u012c\001\002\000\060\002" +
    "\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\036\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\061\uffd4\065\uffd4\066\uffd4" +
    "\067\uffd4\074\uffd4\102\uffd4\001\002\000\006\024\u012e\037" +
    "\u012d\001\002\000\004\040\u0133\001\002\000\004\037\u012f" +
    "\001\002\000\032\014\067\025\075\033\111\070\106\071" +
    "\110\072\101\075\113\076\073\077\077\100\071\101\105" +
    "\102\100\001\002\000\006\040\u0131\041\305\001\002\000" +
    "\004\011\u0132\001\002\000\060\002\uffb9\003\uffb9\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\036\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\061\uffb9\065\uffb9\066\uffb9\067\uffb9\074\uffb9\102" +
    "\uffb9\001\002\000\004\024\u0134\001\002\000\004\037\u0135" +
    "\001\002\000\004\037\314\001\002\000\006\040\u0137\041" +
    "\316\001\002\000\004\011\u0138\001\002\000\060\002\uffb7" +
    "\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\036" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\061\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\074\uffb7\102\uffb7\001\002\000\042\011\u013f\013\134" +
    "\014\127\015\133\016\136\017\140\020\141\021\131\022" +
    "\142\023\132\026\137\027\135\030\143\031\125\032\126" +
    "\044\130\001\002\000\044\004\114\005\122\006\121\007" +
    "\115\010\120\014\067\025\075\033\111\070\106\071\110" +
    "\072\101\075\113\076\073\077\077\100\071\101\105\102" +
    "\100\001\002\000\004\034\u013c\001\002\000\032\014\067" +
    "\025\075\033\111\070\106\071\110\072\101\075\113\076" +
    "\073\077\077\100\071\101\105\102\100\001\002\000\042" +
    "\011\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\044\uff83\001\002\000\060\002\uffd0\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\036\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\051\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\061\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\074\uffd0\102\uffd0\001\002\000\060\002\uffd2\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\036\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\061\uffd2\065\uffd2\066\uffd2\067\uffd2\074\uffd2" +
    "\102\uffd2\001\002\000\004\035\u0141\001\002\000\004\102" +
    "\337\001\002\000\006\036\u0143\041\343\001\002\000\004" +
    "\011\u0144\001\002\000\060\002\uffa5\003\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\036\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\051\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\061\uffa5\065\uffa5\066\uffa5\067\uffa5\074\uffa5\102\uffa5" +
    "\001\002\000\004\002\001\001\002\000\042\013\134\014" +
    "\127\015\133\016\136\017\140\020\141\021\131\022\142" +
    "\023\132\026\137\027\135\030\143\031\125\032\126\035" +
    "\u0147\044\130\001\002\000\034\014\067\025\075\033\111" +
    "\043\u0148\070\106\071\110\072\101\075\113\076\073\077" +
    "\077\100\071\101\105\102\100\001\002\000\004\024\u0153" +
    "\001\002\000\036\014\uffc7\025\uffc7\033\uffc7\036\uffc7\043" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\075\uffc7\076\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\001\002\000\042\013\134\014" +
    "\127\015\133\016\136\017\140\020\141\021\131\022\142" +
    "\023\132\024\u014e\026\137\027\135\030\143\031\125\032" +
    "\126\044\130\001\002\000\036\014\067\025\075\033\111" +
    "\036\u014d\043\u0148\070\106\071\110\072\101\075\113\076" +
    "\073\077\077\100\071\101\105\102\100\001\002\000\036" +
    "\014\uffc6\025\uffc6\033\uffc6\036\uffc6\043\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\001\002\000\060\002\uffc8\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\036\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\061\uffc8\065\uffc8\066\uffc8\067\uffc8\074\uffc8\102\uffc8" +
    "\001\002\000\004\027\u014f\001\002\000\004\035\u0150\001" +
    "\002\000\054\003\037\004\012\005\010\006\025\007\004" +
    "\010\054\045\021\046\045\047\032\051\016\053\050\054" +
    "\015\055\060\056\043\057\011\061\052\065\056\066\044" +
    "\067\014\074\047\102\033\001\002\000\056\003\037\004" +
    "\012\005\010\006\025\007\004\010\054\036\u0152\045\021" +
    "\046\045\047\032\051\016\053\050\054\015\055\060\056" +
    "\043\057\011\061\052\065\056\066\044\067\014\074\047" +
    "\102\033\001\002\000\036\014\uffc5\025\uffc5\033\uffc5\036" +
    "\uffc5\043\uffc5\070\uffc5\071\uffc5\072\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\101\uffc5\102\uffc5\001\002\000\004\027" +
    "\u0154\001\002\000\004\035\u0155\001\002\000\054\003\037" +
    "\004\012\005\010\006\025\007\004\010\054\045\021\046" +
    "\045\047\032\051\016\053\050\054\015\055\060\056\043" +
    "\057\011\061\052\065\056\066\044\067\014\074\047\102" +
    "\033\001\002\000\056\003\037\004\012\005\010\006\025" +
    "\007\004\010\054\036\u0157\045\021\046\045\047\032\051" +
    "\016\053\050\054\015\055\060\056\043\057\011\061\052" +
    "\065\056\066\044\067\014\074\047\102\033\001\002\000" +
    "\036\014\uffc4\025\uffc4\033\uffc4\036\uffc4\043\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\001\002\000\004\102\u0159\001\002\000\010" +
    "\013\373\014\376\024\374\001\002\000\032\014\067\025" +
    "\075\033\111\070\106\071\110\072\101\075\113\076\073" +
    "\077\077\100\071\101\105\102\100\001\002\000\042\011" +
    "\u015c\013\134\014\127\015\133\016\136\017\140\020\141" +
    "\021\131\022\142\023\132\026\137\027\135\030\143\031" +
    "\125\032\126\044\130\001\002\000\004\102\u015d\001\002" +
    "\000\010\013\u0163\014\u0165\024\u0164\001\002\000\004\034" +
    "\u015f\001\002\000\004\035\u0160\001\002\000\054\003\037" +
    "\004\012\005\010\006\025\007\004\010\054\045\021\046" +
    "\045\047\032\051\016\053\050\054\015\055\060\056\043" +
    "\057\011\061\052\065\056\066\044\067\014\074\047\102" +
    "\033\001\002\000\056\003\037\004\012\005\010\006\025" +
    "\007\004\010\054\036\u0162\045\021\046\045\047\032\051" +
    "\016\053\050\054\015\055\060\056\043\057\011\061\052" +
    "\065\056\066\044\067\014\074\047\102\033\001\002\000" +
    "\060\002\uffc2\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\036\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\074\uffc2\102\uffc2\001\002\000\004\013" +
    "\u0168\001\002\000\032\014\067\025\075\033\111\070\106" +
    "\071\110\072\101\075\113\076\073\077\077\100\071\101" +
    "\105\102\100\001\002\000\004\014\u0166\001\002\000\004" +
    "\034\uffbf\001\002\000\042\013\134\014\127\015\133\016" +
    "\136\017\140\020\141\021\131\022\142\023\132\026\137" +
    "\027\135\030\143\031\125\032\126\034\uffc1\044\130\001" +
    "\002\000\004\034\uffc0\001\002\000\032\014\067\025\075" +
    "\033\111\070\106\071\110\072\101\075\113\076\073\077" +
    "\077\100\071\101\105\102\100\001\002\000\042\013\134" +
    "\014\127\015\133\016\136\017\140\020\141\021\131\022" +
    "\142\023\132\026\137\027\135\030\143\031\125\032\126" +
    "\034\u016b\044\130\001\002\000\004\011\u016c\001\002\000" +
    "\060\002\uffbb\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\036\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\074\uffbb\102\uffbb\001\002\000\060\002" +
    "\uffbc\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\036\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\061\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\074\uffbc\102\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\062\002\017\003\033\004\012\006\023\007" +
    "\022\010\054\012\021\015\034\016\006\020\027\021\035" +
    "\022\005\023\016\024\026\025\025\032\045\033\004\035" +
    "\040\044\056\047\050\053\030\055\041\056\037\060\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\030\071\031\102\036\075\040\106" +
    "\041\103\042\101\043\111\052\067\054\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\004\062\006\023\007\022\010\054\012\021\015\034" +
    "\016\006\020\027\021\035\022\005\023\016\024\026\025" +
    "\025\032\045\033\004\035\040\044\056\047\050\053\030" +
    "\055\041\056\037\060\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\061\004\012\006\023\007\022\010\054\012\021\015\034" +
    "\016\006\020\027\021\035\022\005\023\016\024\026\025" +
    "\025\032\045\033\004\035\040\044\056\047\050\053\030" +
    "\055\041\056\037\060\052\001\001\000\056\004\062\006" +
    "\023\007\022\010\054\012\021\015\034\016\006\020\027" +
    "\021\035\022\005\023\016\024\026\025\025\032\045\033" +
    "\004\035\040\044\056\047\050\053\030\055\041\056\037" +
    "\060\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\030\071\031\102\036\075\040\106" +
    "\041\103\042\101\043\111\052\067\054\073\001\001\000" +
    "\024\030\071\031\102\036\075\040\106\041\103\042\101" +
    "\043\111\052\067\054\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\116\030\071\031\102\036\075" +
    "\040\106\041\103\042\101\043\111\052\067\054\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\030\071\031\102\036\075\040\106\041\103\042\101\043" +
    "\111\052\067\054\123\001\001\000\002\001\001\000\024" +
    "\030\071\031\102\036\075\040\106\041\103\042\101\043" +
    "\111\052\067\054\161\001\001\000\024\030\071\031\102" +
    "\036\075\040\106\041\103\042\101\043\111\052\067\054" +
    "\160\001\001\000\024\030\071\031\102\036\075\040\106" +
    "\041\103\042\101\043\111\052\067\054\157\001\001\000" +
    "\024\030\071\031\102\036\075\040\106\041\103\042\101" +
    "\043\111\052\067\054\156\001\001\000\024\030\071\031" +
    "\102\036\075\040\106\041\103\042\101\043\111\052\067" +
    "\054\155\001\001\000\024\030\071\031\102\036\075\040" +
    "\106\041\103\042\101\043\111\052\067\054\154\001\001" +
    "\000\024\030\071\031\102\036\075\040\106\041\103\042" +
    "\101\043\111\052\067\054\153\001\001\000\024\030\071" +
    "\031\102\036\075\040\106\041\103\042\101\043\111\052" +
    "\067\054\152\001\001\000\024\030\071\031\102\036\075" +
    "\040\106\041\103\042\101\043\111\052\067\054\151\001" +
    "\001\000\024\030\071\031\102\036\075\040\106\041\103" +
    "\042\101\043\111\052\067\054\150\001\001\000\024\030" +
    "\071\031\102\036\075\040\106\041\103\042\101\043\111" +
    "\052\067\054\147\001\001\000\024\030\071\031\102\036" +
    "\075\040\106\041\103\042\101\043\111\052\067\054\146" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\145\001\001\000\024" +
    "\030\071\031\102\036\075\040\106\041\103\042\101\043" +
    "\111\052\067\054\144\001\001\000\024\030\071\031\102" +
    "\036\075\040\106\041\103\042\101\043\111\052\067\054" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\030\071\031\102\036" +
    "\075\040\106\041\103\042\101\043\111\052\067\054\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\030" +
    "\071\031\102\036\075\040\106\041\103\042\101\043\111" +
    "\052\067\054\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\030\071\031\102\036\075" +
    "\040\106\041\103\042\101\043\111\052\067\054\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\030\071" +
    "\031\102\036\075\040\106\041\103\042\101\043\111\052" +
    "\067\054\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\030\071\031\102\036\075\040\106\041\103\042\101" +
    "\043\111\052\067\054\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\030\071\031\102\036\075\040\106" +
    "\041\103\042\101\043\111\052\067\054\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\222\046\223\001\001\000\002\001\001\000\004\046\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\030\071\031" +
    "\102\036\075\040\106\041\103\042\101\043\111\052\067" +
    "\054\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\253\004\012\006\023\007\022\010\054\012\021" +
    "\015\034\016\006\020\027\021\035\022\005\023\016\024" +
    "\026\025\025\032\045\033\004\035\040\044\056\047\050" +
    "\053\030\055\041\056\037\060\052\001\001\000\056\004" +
    "\062\006\023\007\022\010\054\012\021\015\034\016\006" +
    "\020\027\021\035\022\005\023\016\024\026\025\025\032" +
    "\045\033\004\035\040\044\056\047\050\053\030\055\041" +
    "\056\037\060\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\030\071\031\102\036\075\040\106\041\103" +
    "\042\101\043\111\052\067\054\260\061\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\030\071\031\102\036\075\040\106\041\103\042\101\043" +
    "\111\052\067\054\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\026\302\030\071\031\102" +
    "\036\075\040\106\041\103\042\101\043\111\052\067\054" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\030\071\031\102\036\075\040\106\041\103\042\101\043" +
    "\111\052\067\054\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\314\001\001\000\026\026\323\030\071" +
    "\031\102\036\075\040\106\041\103\042\101\043\111\052" +
    "\067\054\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\321\030" +
    "\071\031\102\036\075\040\106\041\103\042\101\043\111" +
    "\052\067\054\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\327\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\115\001\001\000\002" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\340\051\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\030\071\031\102\036\075\040\106\041\103\042" +
    "\101\043\111\052\067\054\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\353\057" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\356\004\012\006\023\007\022\010" +
    "\054\012\021\015\034\016\006\020\027\021\035\022\005" +
    "\023\016\024\026\025\025\032\045\033\004\035\040\044" +
    "\056\047\050\053\030\055\041\056\037\060\052\001\001" +
    "\000\056\004\062\006\023\007\022\010\054\012\021\015" +
    "\034\016\006\020\027\021\035\022\005\023\016\024\026" +
    "\025\025\032\045\033\004\035\040\044\056\047\050\053" +
    "\030\055\041\056\037\060\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\366\001\001\000\002\001" +
    "\001\000\060\003\364\004\012\006\023\007\022\010\054" +
    "\012\021\015\034\016\006\020\027\021\035\022\005\023" +
    "\016\024\026\025\025\032\045\033\004\035\040\044\056" +
    "\047\050\053\030\055\041\056\037\060\052\001\001\000" +
    "\056\004\062\006\023\007\022\010\054\012\021\015\034" +
    "\016\006\020\027\021\035\022\005\023\016\024\026\025" +
    "\025\032\045\033\004\035\040\044\056\047\050\053\030" +
    "\055\041\056\037\060\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\030\071\031\102\036" +
    "\075\040\106\041\103\042\101\043\111\052\067\054\u010b" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\030\071\031\102\036\075" +
    "\040\106\041\103\042\101\043\111\052\067\054\u0106\001" +
    "\001\000\024\030\071\031\102\036\075\040\106\041\103" +
    "\042\101\043\111\052\067\054\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\030\071\031\102\036\075\040\106\041\103\042" +
    "\101\043\111\052\067\054\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\030" +
    "\071\031\102\036\075\040\106\041\103\042\101\043\111" +
    "\052\067\054\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\030\071\031\102\036\075\040\106\041\103" +
    "\042\101\043\111\052\067\054\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\u011c\004\012\006\023" +
    "\007\022\010\054\012\021\015\034\016\006\020\027\021" +
    "\035\022\005\023\016\024\026\025\025\032\045\033\004" +
    "\035\040\044\056\047\050\053\030\055\041\056\037\060" +
    "\052\001\001\000\056\004\062\006\023\007\022\010\054" +
    "\012\021\015\034\016\006\020\027\021\035\022\005\023" +
    "\016\024\026\025\025\032\045\033\004\035\040\044\056" +
    "\047\050\053\030\055\041\056\037\060\052\001\001\000" +
    "\004\011\u011f\001\001\000\004\010\u0120\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\u0122\004\012\006" +
    "\023\007\022\010\054\012\021\015\034\016\006\020\027" +
    "\021\035\022\005\023\016\024\026\025\025\032\045\033" +
    "\004\035\040\044\056\047\050\053\030\055\041\056\037" +
    "\060\052\001\001\000\056\004\062\006\023\007\022\010" +
    "\054\012\021\015\034\016\006\020\027\021\035\022\005" +
    "\023\016\024\026\025\025\032\045\033\004\035\040\044" +
    "\056\047\050\053\030\055\041\056\037\060\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\030\071" +
    "\031\102\036\075\040\106\041\103\042\101\043\111\052" +
    "\067\054\u0138\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\026\u012f\030\071\031\102\036\075\040\106\041\103" +
    "\042\101\043\111\052\067\054\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\u013a\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\115\001\001\000\002" +
    "\001\001\000\024\030\071\031\102\036\075\040\106\041" +
    "\103\042\101\043\111\052\067\054\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\u0141\051\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\013\u014a\014\u0148\030\071\031\102" +
    "\036\075\040\106\041\103\042\101\043\111\052\067\054" +
    "\u0149\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\u014b\030\071\031\102\036\075\040" +
    "\106\041\103\042\101\043\111\052\067\054\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\003\u0150\004\012\006\023\007\022" +
    "\010\054\012\021\015\034\016\006\020\027\021\035\022" +
    "\005\023\016\024\026\025\025\032\045\033\004\035\040" +
    "\044\056\047\050\053\030\055\041\056\037\060\052\001" +
    "\001\000\056\004\062\006\023\007\022\010\054\012\021" +
    "\015\034\016\006\020\027\021\035\022\005\023\016\024" +
    "\026\025\025\032\045\033\004\035\040\044\056\047\050" +
    "\053\030\055\041\056\037\060\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\u0155" +
    "\004\012\006\023\007\022\010\054\012\021\015\034\016" +
    "\006\020\027\021\035\022\005\023\016\024\026\025\025" +
    "\032\045\033\004\035\040\044\056\047\050\053\030\055" +
    "\041\056\037\060\052\001\001\000\056\004\062\006\023" +
    "\007\022\010\054\012\021\015\034\016\006\020\027\021" +
    "\035\022\005\023\016\024\026\025\025\032\045\033\004" +
    "\035\040\044\056\047\050\053\030\055\041\056\037\060" +
    "\052\001\001\000\002\001\001\000\004\007\u0159\001\001" +
    "\000\002\001\001\000\024\030\071\031\102\036\075\040" +
    "\106\041\103\042\101\043\111\052\067\054\u015a\001\001" +
    "\000\002\001\001\000\004\017\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\u0160" +
    "\004\012\006\023\007\022\010\054\012\021\015\034\016" +
    "\006\020\027\021\035\022\005\023\016\024\026\025\025" +
    "\032\045\033\004\035\040\044\056\047\050\053\030\055" +
    "\041\056\037\060\052\001\001\000\056\004\062\006\023" +
    "\007\022\010\054\012\021\015\034\016\006\020\027\021" +
    "\035\022\005\023\016\024\026\025\025\032\045\033\004" +
    "\035\040\044\056\047\050\053\030\055\041\056\037\060" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\030\071\031\102\036\075\040\106\041\103\042\101\043" +
    "\111\052\067\054\u0166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\030" +
    "\071\031\102\036\075\040\106\041\103\042\101\043\111" +
    "\052\067\054\u0169\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //errores
        public ArrayList<Errores> errores = new ArrayList<>();


        public String resultado = ""; 

        public void syntax_error(Symbol s)
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
                errores.add(new Errores("Error Sintactico", "   \""+ s.value +"\"   "+" Recuperado", s.left, s.right));
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        }

        public ArrayList<Errores> getErrores(){
                return errores;
        }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= printConsole 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= declararVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= asignarVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresiones ::= sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresiones ::= sentMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresiones ::= sentWhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresiones ::= sentFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresiones ::= sentDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresiones ::= break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresiones ::= continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresiones ::= vector1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresiones ::= vector2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresiones ::= asignacionVector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresiones ::= decListas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresiones ::= addLista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresiones ::= decStructs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresiones ::= instStruct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresiones ::= asigStruct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresiones ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresiones ::= StartWith1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresiones ::= error PYC 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo ::= tipoInstrucciones ID A_PARENTESIS C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Metodo(id.toLowerCase(), new LinkedList<HashMap>(), inst, tipo, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo ::= tipoInstrucciones ID A_PARENTESIS param C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> param = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Metodo(id.toLowerCase(), param, inst, tipo, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param ::= param COMA tipoInstrucciones ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id", id); hm2.put("tipo", tipo); RESULT.add(hm2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param ::= tipoInstrucciones ID 
            {
              LinkedList<HashMap> RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>(); hm.put("id", id); hm.put("tipo", tipo); RESULT.add(hm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StartWith1 ::= START_WITH ID A_PARENTESIS paramLlamada C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new StartWith(id, b, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StartWith1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StartWith1 ::= START_WITH ID A_PARENTESIS C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new StartWith(id, new LinkedList<Expresion>() , idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StartWith1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramLlamada ::= paramLlamada COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramLlamada ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Expresion>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramLlamada",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoInstrucciones ::= VOID 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.VOID;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoInstrucciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoInstrucciones ::= INT 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoInstrucciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoInstrucciones ::= DOUBLE 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoInstrucciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoInstrucciones ::= BOOL 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoInstrucciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoInstrucciones ::= CHAR 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoInstrucciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipoInstrucciones ::= STRING 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoInstrucciones",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoExpresion ::= INT 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoExpresion ::= DOUBLE 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoExpresion ::= BOOL 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoExpresion ::= CHAR 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoExpresion ::= STRING 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null, tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null,tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignarVariables ::= ID IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignarVariables ::= ID MAS MAS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignarVariables ::= ID MENOS MENOS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(exp, inst, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE elseIF 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion elseIf = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, inst, elseIf, expleft, expright);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elseIF ::= ELSE A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Else(inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elseIF ::= ELSE sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentMATCH ::= MATCH expresion A_LLAVE casos C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> c = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Match(exp, c, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentMATCH",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // casos ::= caso 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // casos ::= casos caso 
            {
              LinkedList<Casos> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // caso ::= expresion IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // caso ::= GUION_BAJO IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(new Dato("_", TipoDato.CADENA, instleft, instright), inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentWhile ::= WHILE A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =  new While(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentWhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentFOR ::= FOR A_PARENTESIS asignarVariables expresion PYC updateFOR C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new For(a, exp, b, inst,aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentFOR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // updateFOR ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // updateFOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // updateFOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentDO ::= DO A_LLAVE instruccion C_LLAVE WHILE A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(exp, inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // break ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Break(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // continue ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Continue(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // printConsole ::= PRINTLN A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(val);RESULT= new Println(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printConsole",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // vector1 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // vector1 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // vector2 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // vector2 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listaExpresionesVectores ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listaExpresionesVectores ::= listaExpresionesVectores COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listaExpresionesVectores2 ::= A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listaExpresionesVectores2 ::= listaExpresionesVectores2 COMA A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Expresion>> a = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // accesoVector ::= ID A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoVector(id.toLowerCase(), indice, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // accesoVector2D ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoArreglo2D(id.toLowerCase(), indice1, indice2, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector2D",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos(id.toLowerCase(), indice, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos2D(id.toLowerCase(), indice1, indice2, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decListas ::= LIST MENOR_Q tipoExpresion MAYOR_Q ID IGUAL NEW LIST A_PARENTESIS C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		RESULT = new DeclaraLista(tipo, id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decListas",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // addLista ::= ID PUNTO APPEND A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new AddLista(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addLista",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // removeLista ::= ID PUNTO REMOVE A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new RemoveElementoLista(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("removeLista",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decStructs ::= STRUCT A_LLAVE listaCampos C_LLAVE ID PYC 
            {
              Instruccion RESULT =null;
		int camposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int camposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Campo> campos = (LinkedList<Campo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new DecStruct(id.toLowerCase(), campos, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decStructs",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaCampos ::= listaCampos campoStruct 
            {
              LinkedList<Campo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Campo> b = (LinkedList<Campo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Campo a = (Campo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCampos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaCampos ::= campoStruct 
            {
              LinkedList<Campo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Campo a = (Campo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCampos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // campoStruct ::= ID DOS_P tipoExpresion PYC 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Campo(tipo, id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campoStruct",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // campoStruct ::= ID DOS_P ID PYC 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idStruct2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idStruct2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String idStruct2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CampoStruct(idStruct2.toLowerCase(), id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campoStruct",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instStruct ::= VARIABLE ID DOS_P ID IGUAL A_LLAVE valoresStruct C_LLAVE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int structIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int structIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String structId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ValorStruct> valores = (LinkedList<ValorStruct>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new InstStruct("var", id.toLowerCase(), structId.toLowerCase(), valores, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instStruct",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instStruct ::= CONSTANTE ID DOS_P ID IGUAL A_LLAVE valoresStruct C_LLAVE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int structIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int structIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String structId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ValorStruct> valores = (LinkedList<ValorStruct>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new InstStruct("const", id.toLowerCase(), structId.toLowerCase(), valores, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instStruct",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valoresStruct ::= valoresStruct COMA valorStruct 
            {
              LinkedList<ValorStruct> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ValorStruct> b = (LinkedList<ValorStruct>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValorStruct a = (ValorStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresStruct",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valoresStruct ::= valorStruct 
            {
              LinkedList<ValorStruct> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValorStruct a = (ValorStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresStruct",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valorStruct ::= ID DOS_P expresion 
            {
              ValorStruct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ValorStruct(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorStruct",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // accesoCampoStruct ::= ID PUNTO ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AccesoCampoStruct(id.toLowerCase(), campo.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoCampoStruct",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asigStruct ::= ID PUNTO ID IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int campoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String campo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AsignacionCampoStruct(id.toLowerCase(), campo.toLowerCase(), exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asigStruct",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // natRound ::= ROUND A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Round(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natRound",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // natLength ::= LENGTH A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Length(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natLength",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // natToString ::= TOSTRING A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ToString(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natToString",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // natfind ::= ID PUNTO FIND A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Find(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natfind",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val, "-", null, valleft,valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "**", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "*", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= expresion DIVIDIR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "/", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "%", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "+", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "-", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "==", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "!=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= expresion MENOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= expresion MAYOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val, null, "!", valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "^", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "||", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "&&", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.INT, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.DOUBLE, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= BOOLEANO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.BOOLEAN, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CADENA, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= CARACTER 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CHAR, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new RecVariable(id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= A_PARENTESIS tipoExpresion C_PARENTESIS expresion 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Casteo(exp, tipo, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= accesoVector2D 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= removeLista 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= natRound 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion ::= natLength 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion ::= natfind 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion ::= natToString 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion ::= accesoCampoStruct 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
