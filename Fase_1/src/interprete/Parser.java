
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package interprete;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import instruccion.Instruccion;
import expresiones.Dato;
import expresiones.Aritmeticas;
import expresiones.TipoDato;
import expresiones.Expresion;
import expresiones.Negativo;
import expresiones.Relacionales;
import expresiones.Logicos;
import expresiones.RecVariable;
import funciones.DecVariables;
import funciones.Println;
import funciones.AsignarVariables;
import funciones.IncDec;
import funciones.If;
import funciones.Else;
import funciones.Match;
import funciones.Casos;
import funciones.While;
import funciones.For;
import funciones.DoWhile;
import funciones.Break;
import funciones.Continue;
import excepciones.Errores;
import expresiones.Casteo;
import funciones.DecArreglos;
import funciones.DecArreglos2D;
import expresiones.AccesoVector;
import expresiones.AccesoArreglo2D;
import funciones.AsigArreglos;
import funciones.AsigArreglos2D;
import funciones.DeclaraLista;
import funciones.AddLista;
import funciones.RemoveElementoLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.Find;
import expresiones.ToString;
import funciones.DecStruct;
import funciones.Campo;
import funciones.CampoStruct;
import funciones.InstStruct;
import funciones.ValorStruct;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\007\000\002\006" +
    "\007\000\002\006\011\000\002\006\011\000\002\006\014" +
    "\000\002\006\014\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\010\011\000\002\010\012\000\002" +
    "\011\006\000\002\011\004\000\002\012\007\000\002\013" +
    "\003\000\002\013\004\000\002\014\010\000\002\014\010" +
    "\000\002\015\011\000\002\016\014\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\020\013\000\002" +
    "\021\004\000\002\022\004\000\002\023\007\000\002\024" +
    "\015\000\002\024\015\000\002\025\017\000\002\025\017" +
    "\000\002\026\003\000\002\026\005\000\002\027\005\000" +
    "\002\027\007\000\002\030\006\000\002\031\011\000\002" +
    "\032\011\000\002\032\014\000\002\033\015\000\002\035" +
    "\011\000\002\036\010\000\002\044\010\000\002\045\004" +
    "\000\002\045\003\000\002\046\006\000\002\046\006\000" +
    "\002\047\013\000\002\047\013\000\002\050\005\000\002" +
    "\050\003\000\002\051\005\000\002\040\006\000\002\041" +
    "\006\000\002\043\006\000\002\042\010\000\002\052\004" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\004" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\006\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\036\003\040\045\031\046\021\047\024\051" +
    "\044\053\013\054\043\055\026\056\036\057\007\061\012" +
    "\065\010\067\035\102\025\001\002\000\042\002\ufff4\003" +
    "\ufff4\036\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\061\ufff4\065\ufff4\067" +
    "\ufff4\102\ufff4\001\002\000\042\002\uffff\003\uffff\036\uffff" +
    "\045\uffff\046\uffff\047\uffff\051\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\061\uffff\065\uffff\067\uffff\102\uffff" +
    "\001\002\000\042\002\ufff5\003\ufff5\036\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\061\ufff5\065\ufff5\067\ufff5\102\ufff5\001\002\000" +
    "\004\011\u0142\001\002\000\004\035\u0135\001\002\000\042" +
    "\002\ufffd\003\ufffd\036\ufffd\045\ufffd\046\ufffd\047\ufffd\051" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\061\ufffd" +
    "\065\ufffd\067\ufffd\102\ufffd\001\002\000\004\026\u012b\001" +
    "\002\000\004\033\u0125\001\002\000\042\002\ufff8\003\ufff8" +
    "\036\ufff8\045\ufff8\046\ufff8\047\ufff8\051\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\061\ufff8\065\ufff8\067\ufff8" +
    "\102\ufff8\001\002\000\042\002\uffee\003\uffee\036\uffee\045" +
    "\uffee\046\uffee\047\uffee\051\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\061\uffee\065\uffee\067\uffee\102\uffee\001" +
    "\002\000\042\002\ufff0\003\ufff0\036\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\051\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\061\ufff0\065\ufff0\067\ufff0\102\ufff0\001\002\000\040" +
    "\002\000\003\040\045\031\046\021\047\024\051\044\053" +
    "\013\054\043\055\026\056\036\057\007\061\012\065\010" +
    "\067\035\102\025\001\002\000\042\002\ufff9\003\ufff9\036" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\061\ufff9\065\ufff9\067\ufff9\102" +
    "\ufff9\001\002\000\004\102\u0105\001\002\000\042\002\uffec" +
    "\003\uffec\036\uffec\045\uffec\046\uffec\047\uffec\051\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\061\uffec\065\uffec" +
    "\067\uffec\102\uffec\001\002\000\042\002\ufffa\003\ufffa\036" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\051\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\061\ufffa\065\ufffa\067\ufffa\102" +
    "\ufffa\001\002\000\004\033\371\001\002\000\014\013\237" +
    "\014\241\024\240\037\350\042\347\001\002\000\004\035" +
    "\337\001\002\000\042\002\ufff6\003\ufff6\036\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\061\ufff6\065\ufff6\067\ufff6\102\ufff6\001\002" +
    "\000\042\002\ufff7\003\ufff7\036\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\051\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\061\ufff7\065\ufff7\067\ufff7\102\ufff7\001\002\000\004\102" +
    "\257\001\002\000\042\002\uffef\003\uffef\036\uffef\045\uffef" +
    "\046\uffef\047\uffef\051\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\061\uffef\065\uffef\067\uffef\102\uffef\001\002" +
    "\000\004\002\256\001\002\000\042\002\ufffc\003\ufffc\036" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\061\ufffc\065\ufffc\067\ufffc\102" +
    "\ufffc\001\002\000\004\033\252\001\002\000\004\011\251" +
    "\001\002\000\042\002\ufff1\003\ufff1\036\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\051\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\061\ufff1\065\ufff1\067\ufff1\102\ufff1\001\002\000" +
    "\004\011\250\001\002\000\042\002\ufff2\003\ufff2\036\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\051\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\061\ufff2\065\ufff2\067\ufff2\102\ufff2" +
    "\001\002\000\042\002\uffed\003\uffed\036\uffed\045\uffed\046" +
    "\uffed\047\uffed\051\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\057\uffed\061\uffed\065\uffed\067\uffed\102\uffed\001\002\000" +
    "\004\033\216\001\002\000\032\014\046\025\053\033\067" +
    "\070\064\071\066\072\055\075\071\076\051\077\057\100" +
    "\047\101\063\102\056\001\002\000\042\002\ufffb\003\ufffb" +
    "\036\ufffb\045\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\061\ufffb\065\ufffb\067\ufffb" +
    "\102\ufffb\001\002\000\032\014\046\025\053\033\067\070" +
    "\064\071\066\072\055\075\071\076\051\077\057\100\047" +
    "\101\063\102\056\001\002\000\056\011\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\034\uff99\035\uff99\036\uff99\040\uff99\041\uff99\044\uff99" +
    "\001\002\000\056\011\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034\uff95\035" +
    "\uff95\036\uff95\040\uff95\041\uff95\044\uff95\001\002\000\056" +
    "\011\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\034\uff9b\035\uff9b\036\uff9b\040" +
    "\uff9b\041\uff9b\044\uff9b\001\002\000\042\013\113\014\105" +
    "\015\111\016\114\017\116\020\117\021\107\022\121\023" +
    "\110\026\115\027\112\030\120\031\103\032\104\035\173" +
    "\044\106\001\002\000\032\014\046\025\053\033\067\070" +
    "\064\071\066\072\055\075\071\076\051\077\057\100\047" +
    "\101\063\102\056\001\002\000\056\011\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\034\uff93\035\uff93\036\uff93\040\uff93\041\uff93\044\uff93" +
    "\001\002\000\004\033\167\001\002\000\062\011\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\034\uff97\035\uff97\036\uff97\037\151\040\uff97" +
    "\041\uff97\042\150\044\uff97\001\002\000\056\011\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a" +
    "\044\uff9a\001\002\000\056\011\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90" +
    "\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\034" +
    "\uff90\035\uff90\036\uff90\040\uff90\041\uff90\044\uff90\001\002" +
    "\000\056\011\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\034\uff94\035\uff94\036" +
    "\uff94\040\uff94\041\uff94\044\uff94\001\002\000\056\011\uff91" +
    "\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\022\uff91\023\uff91\024\uff91\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\034\uff91\035\uff91\036\uff91\040\uff91\041" +
    "\uff91\044\uff91\001\002\000\056\011\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\034\uff98\035\uff98\036\uff98\040\uff98\041\uff98\044\uff98\001" +
    "\002\000\004\033\145\001\002\000\056\011\uff92\013\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\034\uff92\035\uff92\036\uff92\040\uff92\041\uff92\044" +
    "\uff92\001\002\000\004\033\142\001\002\000\044\004\072" +
    "\005\100\006\077\007\073\010\076\014\046\025\053\033" +
    "\067\070\064\071\066\072\055\075\071\076\051\077\057" +
    "\100\047\101\063\102\056\001\002\000\056\011\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\041\uff8f" +
    "\044\uff8f\001\002\000\056\011\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\040\uff9c\041\uff9c\044\uff9c\001\002" +
    "\000\014\011\uffeb\024\uffeb\027\uffeb\034\uffeb\037\uffeb\001" +
    "\002\000\014\011\uffe8\024\uffe8\027\uffe8\034\uffe8\037\uffe8" +
    "\001\002\000\042\013\113\014\105\015\111\016\114\017" +
    "\116\020\117\021\107\022\121\023\110\026\115\027\112" +
    "\030\120\031\103\032\104\034\141\044\106\001\002\000" +
    "\004\034\101\001\002\000\014\011\uffe7\024\uffe7\027\uffe7" +
    "\034\uffe7\037\uffe7\001\002\000\014\011\uffe9\024\uffe9\027" +
    "\uffe9\034\uffe9\037\uffe9\001\002\000\014\011\uffea\024\uffea" +
    "\027\uffea\034\uffea\037\uffea\001\002\000\032\014\046\025" +
    "\053\033\067\070\064\071\066\072\055\075\071\076\051" +
    "\077\057\100\047\101\063\102\056\001\002\000\056\011" +
    "\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96" +
    "\021\uff96\022\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\034\uff96\035\uff96\036\uff96\040\uff96" +
    "\041\uff96\044\uff96\001\002\000\032\014\046\025\053\033" +
    "\067\070\064\071\066\072\055\075\071\076\051\077\057" +
    "\100\047\101\063\102\056\001\002\000\032\014\046\025" +
    "\053\033\067\070\064\071\066\072\055\075\071\076\051" +
    "\077\057\100\047\101\063\102\056\001\002\000\032\014" +
    "\046\025\053\033\067\070\064\071\066\072\055\075\071" +
    "\076\051\077\057\100\047\101\063\102\056\001\002\000" +
    "\032\014\046\025\053\033\067\070\064\071\066\072\055" +
    "\075\071\076\051\077\057\100\047\101\063\102\056\001" +
    "\002\000\032\014\046\025\053\033\067\070\064\071\066" +
    "\072\055\075\071\076\051\077\057\100\047\101\063\102" +
    "\056\001\002\000\032\014\046\025\053\033\067\070\064" +
    "\071\066\072\055\075\071\076\051\077\057\100\047\101" +
    "\063\102\056\001\002\000\032\014\046\025\053\033\067" +
    "\070\064\071\066\072\055\075\071\076\051\077\057\100" +
    "\047\101\063\102\056\001\002\000\032\014\046\025\053" +
    "\033\067\070\064\071\066\072\055\075\071\076\051\077" +
    "\057\100\047\101\063\102\056\001\002\000\032\014\046" +
    "\025\053\033\067\070\064\071\066\072\055\075\071\076" +
    "\051\077\057\100\047\101\063\102\056\001\002\000\032" +
    "\014\046\025\053\033\067\070\064\071\066\072\055\075" +
    "\071\076\051\077\057\100\047\101\063\102\056\001\002" +
    "\000\032\014\046\025\053\033\067\070\064\071\066\072" +
    "\055\075\071\076\051\077\057\100\047\101\063\102\056" +
    "\001\002\000\032\014\046\025\053\033\067\070\064\071" +
    "\066\072\055\075\071\076\051\077\057\100\047\101\063" +
    "\102\056\001\002\000\032\014\046\025\053\033\067\070" +
    "\064\071\066\072\055\075\071\076\051\077\057\100\047" +
    "\101\063\102\056\001\002\000\032\014\046\025\053\033" +
    "\067\070\064\071\066\072\055\075\071\076\051\077\057" +
    "\100\047\101\063\102\056\001\002\000\032\014\046\025" +
    "\053\033\067\070\064\071\066\072\055\075\071\076\051" +
    "\077\057\100\047\101\063\102\056\001\002\000\056\011" +
    "\uffa4\013\113\014\105\015\111\016\114\017\116\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4" +
    "\041\uffa4\044\106\001\002\000\056\011\uff9f\013\113\014" +
    "\105\015\111\016\114\017\116\020\117\021\107\022\121" +
    "\023\110\024\uff9f\026\115\027\112\030\uff9f\031\103\032" +
    "\104\034\uff9f\035\uff9f\036\uff9f\040\uff9f\041\uff9f\044\106" +
    "\001\002\000\056\011\uffa7\013\113\014\105\015\111\016" +
    "\114\017\116\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\040\uffa7\041\uffa7\044\106\001\002\000\056" +
    "\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa\036\uffaa\040" +
    "\uffaa\041\uffaa\044\106\001\002\000\056\011\uffa5\013\113" +
    "\014\105\015\111\016\114\017\116\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5\041\uffa5\044" +
    "\106\001\002\000\056\011\uffab\013\uffab\014\uffab\015\uffab" +
    "\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034\uffab" +
    "\035\uffab\036\uffab\040\uffab\041\uffab\044\106\001\002\000" +
    "\056\011\uffa9\013\uffa9\014\uffa9\015\111\016\114\017\116" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\040\uffa9\041\uffa9\044\106\001\002\000\056\011\uffa3\013" +
    "\113\014\105\015\111\016\114\017\116\020\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3" +
    "\044\106\001\002\000\056\011\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034" +
    "\uffac\035\uffac\036\uffac\040\uffac\041\uffac\044\106\001\002" +
    "\000\056\011\uffa2\013\113\014\105\015\111\016\114\017" +
    "\116\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\040\uffa2\041\uffa2\044\106\001\002\000\056\011\uffa6" +
    "\013\113\014\105\015\111\016\114\017\116\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\040\uffa6\041" +
    "\uffa6\044\106\001\002\000\054\011\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\034\uffad\035\uffad\036\uffad\040\uffad\041\uffad\001\002\000" +
    "\056\011\uffa8\013\uffa8\014\uffa8\015\111\016\114\017\116" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\040\uffa8\041\uffa8\044\106\001\002\000\056\011\uffa0\013" +
    "\113\014\105\015\111\016\114\017\116\020\117\021\107" +
    "\022\121\023\110\024\uffa0\026\115\027\112\030\uffa0\031" +
    "\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\041\uffa0" +
    "\044\106\001\002\000\056\011\uff9e\013\113\014\105\015" +
    "\111\016\114\017\116\020\117\021\107\022\121\023\110" +
    "\024\uff9e\026\115\027\112\030\uff9e\031\uff9e\032\104\034" +
    "\uff9e\035\uff9e\036\uff9e\040\uff9e\041\uff9e\044\106\001\002" +
    "\000\056\011\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\040\uff9d\041\uff9d\044\uff9d\001\002\000\032\014\046" +
    "\025\053\033\067\070\064\071\066\072\055\075\071\076" +
    "\051\077\057\100\047\101\063\102\056\001\002\000\042" +
    "\013\113\014\105\015\111\016\114\017\116\020\117\021" +
    "\107\022\121\023\110\026\115\027\112\030\120\031\103" +
    "\032\104\034\144\044\106\001\002\000\056\011\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041\uffb1" +
    "\044\uffb1\001\002\000\032\014\046\025\053\033\067\070" +
    "\064\071\066\072\055\075\071\076\051\077\057\100\047" +
    "\101\063\102\056\001\002\000\042\013\113\014\105\015" +
    "\111\016\114\017\116\020\117\021\107\022\121\023\110" +
    "\026\115\027\112\030\120\031\103\032\104\034\147\044" +
    "\106\001\002\000\056\011\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\040\uffb2\041\uffb2\044\uffb2\001\002\000" +
    "\006\064\160\073\157\001\002\000\032\014\046\025\053" +
    "\033\067\070\064\071\066\072\055\075\071\076\051\077" +
    "\057\100\047\101\063\102\056\001\002\000\042\013\113" +
    "\014\105\015\111\016\114\017\116\020\117\021\107\022" +
    "\121\023\110\026\115\027\112\030\120\031\103\032\104" +
    "\040\153\044\106\001\002\000\060\011\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\154\040\uffc3\041\uffc3" +
    "\044\uffc3\001\002\000\032\014\046\025\053\033\067\070" +
    "\064\071\066\072\055\075\071\076\051\077\057\100\047" +
    "\101\063\102\056\001\002\000\042\013\113\014\105\015" +
    "\111\016\114\017\116\020\117\021\107\022\121\023\110" +
    "\026\115\027\112\030\120\031\103\032\104\040\156\044" +
    "\106\001\002\000\056\011\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\040\uffc2\041\uffc2\044\uffc2\001\002\000" +
    "\004\033\164\001\002\000\004\033\161\001\002\000\032" +
    "\014\046\025\053\033\067\070\064\071\066\072\055\075" +
    "\071\076\051\077\057\100\047\101\063\102\056\001\002" +
    "\000\042\013\113\014\105\015\111\016\114\017\116\020" +
    "\117\021\107\022\121\023\110\026\115\027\112\030\120" +
    "\031\103\032\104\034\163\044\106\001\002\000\056\011" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd" +
    "\041\uffbd\044\uffbd\001\002\000\032\014\046\025\053\033" +
    "\067\070\064\071\066\072\055\075\071\076\051\077\057" +
    "\100\047\101\063\102\056\001\002\000\042\013\113\014" +
    "\105\015\111\016\114\017\116\020\117\021\107\022\121" +
    "\023\110\026\115\027\112\030\120\031\103\032\104\034" +
    "\166\044\106\001\002\000\056\011\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\044\uffaf\001" +
    "\002\000\032\014\046\025\053\033\067\070\064\071\066" +
    "\072\055\075\071\076\051\077\057\100\047\101\063\102" +
    "\056\001\002\000\042\013\113\014\105\015\111\016\114" +
    "\017\116\020\117\021\107\022\121\023\110\026\115\027" +
    "\112\030\120\031\103\032\104\034\171\044\106\001\002" +
    "\000\056\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\040\uffb0\041\uffb0\044\uffb0\001\002\000\056\011\uffa1" +
    "\013\113\014\105\015\111\016\114\017\116\020\117\021" +
    "\107\022\121\023\110\024\uffa1\026\115\027\112\030\uffa1" +
    "\031\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1\041" +
    "\uffa1\044\106\001\002\000\034\014\046\025\053\033\067" +
    "\043\174\070\064\071\066\072\055\075\071\076\051\077" +
    "\057\100\047\101\063\102\056\001\002\000\004\024\210" +
    "\001\002\000\036\014\uffd8\025\uffd8\033\uffd8\036\uffd8\043" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\001\002\000\042\013\113\014" +
    "\105\015\111\016\114\017\116\020\117\021\107\022\121" +
    "\023\110\024\202\026\115\027\112\030\120\031\103\032" +
    "\104\044\106\001\002\000\036\014\046\025\053\033\067" +
    "\036\201\043\174\070\064\071\066\072\055\075\071\076" +
    "\051\077\057\100\047\101\063\102\056\001\002\000\036" +
    "\014\uffd7\025\uffd7\033\uffd7\036\uffd7\043\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7" +
    "\102\uffd7\001\002\000\042\002\uffd9\003\uffd9\036\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\061\uffd9\065\uffd9\067\uffd9\102\uffd9\001" +
    "\002\000\004\027\203\001\002\000\004\035\204\001\002" +
    "\000\036\003\040\045\031\046\021\047\024\051\044\053" +
    "\013\054\043\055\026\056\036\057\007\061\012\065\010" +
    "\067\035\102\025\001\002\000\040\003\040\036\207\045" +
    "\031\046\021\047\024\051\044\053\013\054\043\055\026" +
    "\056\036\057\007\061\012\065\010\067\035\102\025\001" +
    "\002\000\042\002\ufffe\003\ufffe\036\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\061\ufffe\065\ufffe\067\ufffe\102\ufffe\001\002\000\036" +
    "\014\uffd6\025\uffd6\033\uffd6\036\uffd6\043\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\001\002\000\004\027\211\001\002\000\004\035" +
    "\212\001\002\000\036\003\040\045\031\046\021\047\024" +
    "\051\044\053\013\054\043\055\026\056\036\057\007\061" +
    "\012\065\010\067\035\102\025\001\002\000\040\003\040" +
    "\036\214\045\031\046\021\047\024\051\044\053\013\054" +
    "\043\055\026\056\036\057\007\061\012\065\010\067\035" +
    "\102\025\001\002\000\036\014\uffd5\025\uffd5\033\uffd5\036" +
    "\uffd5\043\uffd5\070\uffd5\071\uffd5\072\uffd5\075\uffd5\076\uffd5" +
    "\077\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002\000\056\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\041\uffae\044\uffae\001\002\000\004\102\217\001\002\000" +
    "\010\013\237\014\241\024\240\001\002\000\032\014\046" +
    "\025\053\033\067\070\064\071\066\072\055\075\071\076" +
    "\051\077\057\100\047\101\063\102\056\001\002\000\042" +
    "\011\222\013\113\014\105\015\111\016\114\017\116\020" +
    "\117\021\107\022\121\023\110\026\115\027\112\030\120" +
    "\031\103\032\104\044\106\001\002\000\004\102\223\001" +
    "\002\000\010\013\231\014\233\024\232\001\002\000\004" +
    "\034\225\001\002\000\004\035\226\001\002\000\036\003" +
    "\040\045\031\046\021\047\024\051\044\053\013\054\043" +
    "\055\026\056\036\057\007\061\012\065\010\067\035\102" +
    "\025\001\002\000\040\003\040\036\230\045\031\046\021" +
    "\047\024\051\044\053\013\054\043\055\026\056\036\057" +
    "\007\061\012\065\010\067\035\102\025\001\002\000\042" +
    "\002\uffd3\003\uffd3\036\uffd3\045\uffd3\046\uffd3\047\uffd3\051" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\061\uffd3" +
    "\065\uffd3\067\uffd3\102\uffd3\001\002\000\004\013\236\001" +
    "\002\000\032\014\046\025\053\033\067\070\064\071\066" +
    "\072\055\075\071\076\051\077\057\100\047\101\063\102" +
    "\056\001\002\000\004\014\234\001\002\000\004\034\uffd0" +
    "\001\002\000\042\013\113\014\105\015\111\016\114\017" +
    "\116\020\117\021\107\022\121\023\110\026\115\027\112" +
    "\030\120\031\103\032\104\034\uffd2\044\106\001\002\000" +
    "\004\034\uffd1\001\002\000\004\013\246\001\002\000\032" +
    "\014\046\025\053\033\067\070\064\071\066\072\055\075" +
    "\071\076\051\077\057\100\047\101\063\102\056\001\002" +
    "\000\004\014\242\001\002\000\004\011\243\001\002\000" +
    "\070\002\uffde\003\uffde\014\uffde\025\uffde\033\uffde\036\uffde" +
    "\045\uffde\046\uffde\047\uffde\051\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\061\uffde\065\uffde\067\uffde\070\uffde" +
    "\071\uffde\072\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101" +
    "\uffde\102\uffde\001\002\000\042\011\245\013\113\014\105" +
    "\015\111\016\114\017\116\020\117\021\107\022\121\023" +
    "\110\026\115\027\112\030\120\031\103\032\104\044\106" +
    "\001\002\000\070\002\uffe0\003\uffe0\014\uffe0\025\uffe0\033" +
    "\uffe0\036\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\061\uffe0\065\uffe0\067" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\075\uffe0\076\uffe0\077\uffe0" +
    "\100\uffe0\101\uffe0\102\uffe0\001\002\000\004\011\247\001" +
    "\002\000\070\002\uffdf\003\uffdf\014\uffdf\025\uffdf\033\uffdf" +
    "\036\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf\065\uffdf\067\uffdf" +
    "\070\uffdf\071\uffdf\072\uffdf\075\uffdf\076\uffdf\077\uffdf\100" +
    "\uffdf\101\uffdf\102\uffdf\001\002\000\042\002\ufff3\003\ufff3" +
    "\036\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\061\ufff3\065\ufff3\067\ufff3" +
    "\102\ufff3\001\002\000\042\002\uffce\003\uffce\036\uffce\045" +
    "\uffce\046\uffce\047\uffce\051\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\061\uffce\065\uffce\067\uffce\102\uffce\001" +
    "\002\000\032\014\046\025\053\033\067\070\064\071\066" +
    "\072\055\075\071\076\051\077\057\100\047\101\063\102" +
    "\056\001\002\000\042\013\113\014\105\015\111\016\114" +
    "\017\116\020\117\021\107\022\121\023\110\026\115\027" +
    "\112\030\120\031\103\032\104\034\254\044\106\001\002" +
    "\000\004\011\255\001\002\000\042\002\uffcc\003\uffcc\036" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\061\uffcc\065\uffcc\067\uffcc\102" +
    "\uffcc\001\002\000\004\002\001\001\002\000\004\012\260" +
    "\001\002\000\016\004\072\005\100\006\077\007\073\010" +
    "\076\102\261\001\002\000\004\024\324\001\002\000\010" +
    "\011\265\024\263\037\264\001\002\000\032\014\046\025" +
    "\053\033\316\070\064\071\066\072\055\075\071\076\051" +
    "\077\057\100\047\101\063\102\056\001\002\000\004\040" +
    "\266\001\002\000\042\002\uffe5\003\uffe5\036\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\061\uffe5\065\uffe5\067\uffe5\102\uffe5\001\002" +
    "\000\006\024\270\037\267\001\002\000\004\040\300\001" +
    "\002\000\004\037\271\001\002\000\032\014\046\025\053" +
    "\033\067\070\064\071\066\072\055\075\071\076\051\077" +
    "\057\100\047\101\063\102\056\001\002\000\006\040\275" +
    "\041\274\001\002\000\044\013\113\014\105\015\111\016" +
    "\114\017\116\020\117\021\107\022\121\023\110\026\115" +
    "\027\112\030\120\031\103\032\104\040\uffc7\041\uffc7\044" +
    "\106\001\002\000\032\014\046\025\053\033\067\070\064" +
    "\071\066\072\055\075\071\076\051\077\057\100\047\101" +
    "\063\102\056\001\002\000\004\011\276\001\002\000\042" +
    "\002\uffca\003\uffca\036\uffca\045\uffca\046\uffca\047\uffca\051" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\061\uffca" +
    "\065\uffca\067\uffca\102\uffca\001\002\000\044\013\113\014" +
    "\105\015\111\016\114\017\116\020\117\021\107\022\121" +
    "\023\110\026\115\027\112\030\120\031\103\032\104\040" +
    "\uffc6\041\uffc6\044\106\001\002\000\004\024\301\001\002" +
    "\000\004\037\302\001\002\000\004\037\303\001\002\000" +
    "\032\014\046\025\053\033\067\070\064\071\066\072\055" +
    "\075\071\076\051\077\057\100\047\101\063\102\056\001" +
    "\002\000\006\040\306\041\305\001\002\000\004\037\310" +
    "\001\002\000\004\011\307\001\002\000\042\002\uffc8\003" +
    "\uffc8\036\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\061\uffc8\065\uffc8\067" +
    "\uffc8\102\uffc8\001\002\000\032\014\046\025\053\033\067" +
    "\070\064\071\066\072\055\075\071\076\051\077\057\100" +
    "\047\101\063\102\056\001\002\000\006\040\312\041\274" +
    "\001\002\000\006\040\uffc4\041\uffc4\001\002\000\006\040" +
    "\314\041\274\001\002\000\006\040\uffc5\041\uffc5\001\002" +
    "\000\042\011\323\013\113\014\105\015\111\016\114\017" +
    "\116\020\117\021\107\022\121\023\110\026\115\027\112" +
    "\030\120\031\103\032\104\044\106\001\002\000\044\004" +
    "\072\005\100\006\077\007\073\010\076\014\046\025\053" +
    "\033\067\070\064\071\066\072\055\075\071\076\051\077" +
    "\057\100\047\101\063\102\056\001\002\000\004\034\320" +
    "\001\002\000\032\014\046\025\053\033\067\070\064\071" +
    "\066\072\055\075\071\076\051\077\057\100\047\101\063" +
    "\102\056\001\002\000\042\011\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\044\uff96\001" +
    "\002\000\042\002\uffe1\003\uffe1\036\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\051\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\061\uffe1\065\uffe1\067\uffe1\102\uffe1\001\002\000\042" +
    "\002\uffe3\003\uffe3\036\uffe3\045\uffe3\046\uffe3\047\uffe3\051" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3" +
    "\065\uffe3\067\uffe3\102\uffe3\001\002\000\004\035\325\001" +
    "\002\000\004\102\326\001\002\000\004\012\335\001\002" +
    "\000\006\036\uffb4\041\uffb4\001\002\000\006\036\332\041" +
    "\331\001\002\000\004\102\326\001\002\000\004\011\333" +
    "\001\002\000\042\002\uffb6\003\uffb6\036\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\061\uffb6\065\uffb6\067\uffb6\102\uffb6\001\002\000" +
    "\006\036\uffb5\041\uffb5\001\002\000\032\014\046\025\053" +
    "\033\067\070\064\071\066\072\055\075\071\076\051\077" +
    "\057\100\047\101\063\102\056\001\002\000\044\013\113" +
    "\014\105\015\111\016\114\017\116\020\117\021\107\022" +
    "\121\023\110\026\115\027\112\030\120\031\103\032\104" +
    "\036\uffb3\041\uffb3\044\106\001\002\000\036\003\040\045" +
    "\031\046\021\047\024\051\044\053\013\054\043\055\026" +
    "\056\036\057\007\061\012\065\010\067\035\102\025\001" +
    "\002\000\040\003\040\036\341\045\031\046\021\047\024" +
    "\051\044\053\013\054\043\055\026\056\036\057\007\061" +
    "\012\065\010\067\035\102\025\001\002\000\004\053\342" +
    "\001\002\000\004\033\343\001\002\000\032\014\046\025" +
    "\053\033\067\070\064\071\066\072\055\075\071\076\051" +
    "\077\057\100\047\101\063\102\056\001\002\000\042\013" +
    "\113\014\105\015\111\016\114\017\116\020\117\021\107" +
    "\022\121\023\110\026\115\027\112\030\120\031\103\032" +
    "\104\034\345\044\106\001\002\000\004\011\346\001\002" +
    "\000\042\002\uffcf\003\uffcf\036\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\051\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\061\uffcf\065\uffcf\067\uffcf\102\uffcf\001\002\000\004\063" +
    "\364\001\002\000\032\014\046\025\053\033\067\070\064" +
    "\071\066\072\055\075\071\076\051\077\057\100\047\101" +
    "\063\102\056\001\002\000\042\013\113\014\105\015\111" +
    "\016\114\017\116\020\117\021\107\022\121\023\110\026" +
    "\115\027\112\030\120\031\103\032\104\040\352\044\106" +
    "\001\002\000\006\024\354\037\353\001\002\000\032\014" +
    "\046\025\053\033\067\070\064\071\066\072\055\075\071" +
    "\076\051\077\057\100\047\101\063\102\056\001\002\000" +
    "\032\014\046\025\053\033\067\070\064\071\066\072\055" +
    "\075\071\076\051\077\057\100\047\101\063\102\056\001" +
    "\002\000\042\011\356\013\113\014\105\015\111\016\114" +
    "\017\116\020\117\021\107\022\121\023\110\026\115\027" +
    "\112\030\120\031\103\032\104\044\106\001\002\000\042" +
    "\002\uffc1\003\uffc1\036\uffc1\045\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\061\uffc1" +
    "\065\uffc1\067\uffc1\102\uffc1\001\002\000\042\013\113\014" +
    "\105\015\111\016\114\017\116\020\117\021\107\022\121" +
    "\023\110\026\115\027\112\030\120\031\103\032\104\040" +
    "\360\044\106\001\002\000\004\024\361\001\002\000\032" +
    "\014\046\025\053\033\067\070\064\071\066\072\055\075" +
    "\071\076\051\077\057\100\047\101\063\102\056\001\002" +
    "\000\042\011\363\013\113\014\105\015\111\016\114\017" +
    "\116\020\117\021\107\022\121\023\110\026\115\027\112" +
    "\030\120\031\103\032\104\044\106\001\002\000\042\002" +
    "\uffc0\003\uffc0\036\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\061\uffc0\065" +
    "\uffc0\067\uffc0\102\uffc0\001\002\000\004\033\365\001\002" +
    "\000\032\014\046\025\053\033\067\070\064\071\066\072" +
    "\055\075\071\076\051\077\057\100\047\101\063\102\056" +
    "\001\002\000\042\013\113\014\105\015\111\016\114\017" +
    "\116\020\117\021\107\022\121\023\110\026\115\027\112" +
    "\030\120\031\103\032\104\034\367\044\106\001\002\000" +
    "\004\011\370\001\002\000\042\002\uffbe\003\uffbe\036\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\051\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\061\uffbe\065\uffbe\067\uffbe\102\uffbe" +
    "\001\002\000\032\014\046\025\053\033\067\070\064\071" +
    "\066\072\055\075\071\076\051\077\057\100\047\101\063" +
    "\102\056\001\002\000\042\013\113\014\105\015\111\016" +
    "\114\017\116\020\117\021\107\022\121\023\110\026\115" +
    "\027\112\030\120\031\103\032\104\034\373\044\106\001" +
    "\002\000\004\035\374\001\002\000\036\003\040\045\031" +
    "\046\021\047\024\051\044\053\013\054\043\055\026\056" +
    "\036\057\007\061\012\065\010\067\035\102\025\001\002" +
    "\000\040\003\040\036\376\045\031\046\021\047\024\051" +
    "\044\053\013\054\043\055\026\056\036\057\007\061\012" +
    "\065\010\067\035\102\025\001\002\000\044\002\uffdd\003" +
    "\uffdd\036\uffdd\045\uffdd\046\uffdd\047\uffdd\050\377\051\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\061\uffdd\065" +
    "\uffdd\067\uffdd\102\uffdd\001\002\000\006\035\u0102\047\024" +
    "\001\002\000\042\002\uffdc\003\uffdc\036\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\051\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\061\uffdc\065\uffdc\067\uffdc\102\uffdc\001\002\000" +
    "\042\002\uffda\003\uffda\036\uffda\045\uffda\046\uffda\047\uffda" +
    "\051\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\061" +
    "\uffda\065\uffda\067\uffda\102\uffda\001\002\000\036\003\040" +
    "\045\031\046\021\047\024\051\044\053\013\054\043\055" +
    "\026\056\036\057\007\061\012\065\010\067\035\102\025" +
    "\001\002\000\040\003\040\036\u0104\045\031\046\021\047" +
    "\024\051\044\053\013\054\043\055\026\056\036\057\007" +
    "\061\012\065\010\067\035\102\025\001\002\000\042\002" +
    "\uffdb\003\uffdb\036\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\061\uffdb\065" +
    "\uffdb\067\uffdb\102\uffdb\001\002\000\004\012\u0106\001\002" +
    "\000\016\004\072\005\100\006\077\007\073\010\076\102" +
    "\u0107\001\002\000\004\024\u0120\001\002\000\010\011\u010b" +
    "\024\u010a\037\u0109\001\002\000\004\040\u0113\001\002\000" +
    "\032\014\046\025\053\033\u010d\070\064\071\066\072\055" +
    "\075\071\076\051\077\057\100\047\101\063\102\056\001" +
    "\002\000\042\002\uffe6\003\uffe6\036\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\061\uffe6\065\uffe6\067\uffe6\102\uffe6\001\002\000\042" +
    "\011\u0112\013\113\014\105\015\111\016\114\017\116\020" +
    "\117\021\107\022\121\023\110\026\115\027\112\030\120" +
    "\031\103\032\104\044\106\001\002\000\044\004\072\005" +
    "\100\006\077\007\073\010\076\014\046\025\053\033\067" +
    "\070\064\071\066\072\055\075\071\076\051\077\057\100" +
    "\047\101\063\102\056\001\002\000\004\034\u010f\001\002" +
    "\000\032\014\046\025\053\033\067\070\064\071\066\072" +
    "\055\075\071\076\051\077\057\100\047\101\063\102\056" +
    "\001\002\000\042\011\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\026\uff96" +
    "\027\uff96\030\uff96\031\uff96\032\uff96\044\uff96\001\002\000" +
    "\042\002\uffe2\003\uffe2\036\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\051\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\061" +
    "\uffe2\065\uffe2\067\uffe2\102\uffe2\001\002\000\042\002\uffe4" +
    "\003\uffe4\036\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\061\uffe4\065\uffe4" +
    "\067\uffe4\102\uffe4\001\002\000\006\024\u0114\037\u0115\001" +
    "\002\000\004\037\u011c\001\002\000\004\040\u0116\001\002" +
    "\000\004\024\u0117\001\002\000\004\037\u0118\001\002\000" +
    "\004\037\303\001\002\000\006\040\u011a\041\305\001\002" +
    "\000\004\011\u011b\001\002\000\042\002\uffc9\003\uffc9\036" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\061\uffc9\065\uffc9\067\uffc9\102" +
    "\uffc9\001\002\000\032\014\046\025\053\033\067\070\064" +
    "\071\066\072\055\075\071\076\051\077\057\100\047\101" +
    "\063\102\056\001\002\000\006\040\u011e\041\274\001\002" +
    "\000\004\011\u011f\001\002\000\042\002\uffcb\003\uffcb\036" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\061\uffcb\065\uffcb\067\uffcb\102" +
    "\uffcb\001\002\000\004\035\u0121\001\002\000\004\102\326" +
    "\001\002\000\006\036\u0123\041\331\001\002\000\004\011" +
    "\u0124\001\002\000\042\002\uffb7\003\uffb7\036\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\061\uffb7\065\uffb7\067\uffb7\102\uffb7\001\002" +
    "\000\032\014\046\025\053\033\067\070\064\071\066\072" +
    "\055\075\071\076\051\077\057\100\047\101\063\102\056" +
    "\001\002\000\042\013\113\014\105\015\111\016\114\017" +
    "\116\020\117\021\107\022\121\023\110\026\115\027\112" +
    "\030\120\031\103\032\104\034\u0127\044\106\001\002\000" +
    "\004\035\u0128\001\002\000\036\003\040\045\031\046\021" +
    "\047\024\051\044\053\013\054\043\055\026\056\036\057" +
    "\007\061\012\065\010\067\035\102\025\001\002\000\040" +
    "\003\040\036\u012a\045\031\046\021\047\024\051\044\053" +
    "\013\054\043\055\026\056\036\057\007\061\012\065\010" +
    "\067\035\102\025\001\002\000\042\002\uffd4\003\uffd4\036" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\061\uffd4\065\uffd4\067\uffd4\102" +
    "\uffd4\001\002\000\014\004\072\005\100\006\077\007\073" +
    "\010\076\001\002\000\004\027\u012d\001\002\000\004\102" +
    "\u012e\001\002\000\004\024\u012f\001\002\000\004\062\u0130" +
    "\001\002\000\004\061\u0131\001\002\000\004\033\u0132\001" +
    "\002\000\004\034\u0133\001\002\000\004\011\u0134\001\002" +
    "\000\042\002\uffbf\003\uffbf\036\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\061\uffbf\065\uffbf\067\uffbf\102\uffbf\001\002\000\004\102" +
    "\u0136\001\002\000\004\012\u013d\001\002\000\006\036\u0139" +
    "\102\u0136\001\002\000\006\036\uffba\102\uffba\001\002\000" +
    "\004\102\u013b\001\002\000\006\036\uffbb\102\uffbb\001\002" +
    "\000\004\011\u013c\001\002\000\042\002\uffbc\003\uffbc\036" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\061\uffbc\065\uffbc\067\uffbc\102" +
    "\uffbc\001\002\000\016\004\072\005\100\006\077\007\073" +
    "\010\076\102\u013e\001\002\000\004\011\u0141\001\002\000" +
    "\004\011\u0140\001\002\000\006\036\uffb9\102\uffb9\001\002" +
    "\000\006\036\uffb8\102\uffb8\001\002\000\042\002\uffcd\003" +
    "\uffcd\036\uffcd\045\uffcd\046\uffcd\047\uffcd\051\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\061\uffcd\065\uffcd\067" +
    "\uffcd\102\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\052\002\032\003\016\004\004\006\033\007" +
    "\044\010\022\012\017\015\013\016\027\020\026\021\005" +
    "\022\003\023\010\024\040\025\036\032\015\033\031\035" +
    "\014\044\041\047\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\004\205\006\033\007\044\010\022\012\017\015\013" +
    "\016\027\020\026\021\005\022\003\023\010\024\040\025" +
    "\036\032\015\033\031\035\014\044\041\047\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\051\001\001\000\002\001\001" +
    "\000\022\030\047\031\060\036\053\040\064\041\061\042" +
    "\057\043\067\052\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\047\031\060\036\053\040\064\041\061\042\057\043\067" +
    "\052\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\074" +
    "\030\047\031\060\036\053\040\064\041\061\042\057\043" +
    "\067\052\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\101\001\001\000\002\001\001" +
    "\000\022\030\047\031\060\036\053\040\064\041\061\042" +
    "\057\043\067\052\137\001\001\000\022\030\047\031\060" +
    "\036\053\040\064\041\061\042\057\043\067\052\136\001" +
    "\001\000\022\030\047\031\060\036\053\040\064\041\061" +
    "\042\057\043\067\052\135\001\001\000\022\030\047\031" +
    "\060\036\053\040\064\041\061\042\057\043\067\052\134" +
    "\001\001\000\022\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\133\001\001\000\022\030\047" +
    "\031\060\036\053\040\064\041\061\042\057\043\067\052" +
    "\132\001\001\000\022\030\047\031\060\036\053\040\064" +
    "\041\061\042\057\043\067\052\131\001\001\000\022\030" +
    "\047\031\060\036\053\040\064\041\061\042\057\043\067" +
    "\052\130\001\001\000\022\030\047\031\060\036\053\040" +
    "\064\041\061\042\057\043\067\052\127\001\001\000\022" +
    "\030\047\031\060\036\053\040\064\041\061\042\057\043" +
    "\067\052\126\001\001\000\022\030\047\031\060\036\053" +
    "\040\064\041\061\042\057\043\067\052\125\001\001\000" +
    "\022\030\047\031\060\036\053\040\064\041\061\042\057" +
    "\043\067\052\124\001\001\000\022\030\047\031\060\036" +
    "\053\040\064\041\061\042\057\043\067\052\123\001\001" +
    "\000\022\030\047\031\060\036\053\040\064\041\061\042" +
    "\057\043\067\052\122\001\001\000\022\030\047\031\060" +
    "\036\053\040\064\041\061\042\057\043\067\052\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\030\047\031\060\036\053\040\064\041\061\042" +
    "\057\043\067\052\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\030\047\031" +
    "\060\036\053\040\064\041\061\042\057\043\067\052\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\047\031\060\036\053\040\064\041\061\042\057\043\067" +
    "\052\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\047\031\060" +
    "\036\053\040\064\041\061\042\057\043\067\052\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\047" +
    "\031\060\036\053\040\064\041\061\042\057\043\067\052" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\030\047\031\060\036\053\040\064\041\061\042\057\043" +
    "\067\052\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\176\014\174\030\047\031" +
    "\060\036\053\040\064\041\061\042\057\043\067\052\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\014\177\030\047\031\060\036\053\040\064" +
    "\041\061\042\057\043\067\052\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\204\004\004\006\033\007\044\010\022\012" +
    "\017\015\013\016\027\020\026\021\005\022\003\023\010" +
    "\024\040\025\036\032\015\033\031\035\014\044\041\047" +
    "\021\001\001\000\046\004\205\006\033\007\044\010\022" +
    "\012\017\015\013\016\027\020\026\021\005\022\003\023" +
    "\010\024\040\025\036\032\015\033\031\035\014\044\041" +
    "\047\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\212\004\004" +
    "\006\033\007\044\010\022\012\017\015\013\016\027\020" +
    "\026\021\005\022\003\023\010\024\040\025\036\032\015" +
    "\033\031\035\014\044\041\047\021\001\001\000\046\004" +
    "\205\006\033\007\044\010\022\012\017\015\013\016\027" +
    "\020\026\021\005\022\003\023\010\024\040\025\036\032" +
    "\015\033\031\035\014\044\041\047\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\217\001\001\000" +
    "\002\001\001\000\022\030\047\031\060\036\053\040\064" +
    "\041\061\042\057\043\067\052\220\001\001\000\002\001" +
    "\001\000\004\017\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\226\004\004\006" +
    "\033\007\044\010\022\012\017\015\013\016\027\020\026" +
    "\021\005\022\003\023\010\024\040\025\036\032\015\033" +
    "\031\035\014\044\041\047\021\001\001\000\046\004\205" +
    "\006\033\007\044\010\022\012\017\015\013\016\027\020" +
    "\026\021\005\022\003\023\010\024\040\025\036\032\015" +
    "\033\031\035\014\044\041\047\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\030\047\031\060\036\053" +
    "\040\064\041\061\042\057\043\067\052\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\030\047\031\060\036" +
    "\053\040\064\041\061\042\057\043\067\052\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\030" +
    "\047\031\060\036\053\040\064\041\061\042\057\043\067" +
    "\052\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\047\031\060\036\053\040\064\041\061\042\057" +
    "\043\067\052\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\271\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\047\031\060\036\053\040" +
    "\064\041\061\042\057\043\067\052\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\303\001\001\000\024" +
    "\026\312\030\047\031\060\036\053\040\064\041\061\042" +
    "\057\043\067\052\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\026" +
    "\310\030\047\031\060\036\053\040\064\041\061\042\057" +
    "\043\067\052\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\316\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\073\001\001\000\002\001\001" +
    "\000\022\030\047\031\060\036\053\040\064\041\061\042" +
    "\057\043\067\052\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\327\051\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\047" +
    "\031\060\036\053\040\064\041\061\042\057\043\067\052" +
    "\335\001\001\000\002\001\001\000\050\003\337\004\004" +
    "\006\033\007\044\010\022\012\017\015\013\016\027\020" +
    "\026\021\005\022\003\023\010\024\040\025\036\032\015" +
    "\033\031\035\014\044\041\047\021\001\001\000\046\004" +
    "\205\006\033\007\044\010\022\012\017\015\013\016\027" +
    "\020\026\021\005\022\003\023\010\024\040\025\036\032" +
    "\015\033\031\035\014\044\041\047\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\030\047\031\060\036" +
    "\053\040\064\041\061\042\057\043\067\052\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\047\031\060\036\053\040\064" +
    "\041\061\042\057\043\067\052\350\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\030\047\031\060\036\053" +
    "\040\064\041\061\042\057\043\067\052\356\001\001\000" +
    "\022\030\047\031\060\036\053\040\064\041\061\042\057" +
    "\043\067\052\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\047" +
    "\031\060\036\053\040\064\041\061\042\057\043\067\052" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\030\047\031\060\036\053\040\064\041" +
    "\061\042\057\043\067\052\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\030\047\031" +
    "\060\036\053\040\064\041\061\042\057\043\067\052\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\374\004\004\006\033\007\044\010\022\012\017\015\013" +
    "\016\027\020\026\021\005\022\003\023\010\024\040\025" +
    "\036\032\015\033\031\035\014\044\041\047\021\001\001" +
    "\000\046\004\205\006\033\007\044\010\022\012\017\015" +
    "\013\016\027\020\026\021\005\022\003\023\010\024\040" +
    "\025\036\032\015\033\031\035\014\044\041\047\021\001" +
    "\001\000\004\011\377\001\001\000\004\010\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\u0102\004" +
    "\004\006\033\007\044\010\022\012\017\015\013\016\027" +
    "\020\026\021\005\022\003\023\010\024\040\025\036\032" +
    "\015\033\031\035\014\044\041\047\021\001\001\000\046" +
    "\004\205\006\033\007\044\010\022\012\017\015\013\016" +
    "\027\020\026\021\005\022\003\023\010\024\040\025\036" +
    "\032\015\033\031\035\014\044\041\047\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\047\031\060\036\053\040\064\041\061\042\057" +
    "\043\067\052\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\u010d\030\047\031\060\036\053\040\064" +
    "\041\061\042\057\043\067\052\073\001\001\000\002\001" +
    "\001\000\022\030\047\031\060\036\053\040\064\041\061" +
    "\042\057\043\067\052\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u0118\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\u011c\030\047\031" +
    "\060\036\053\040\064\041\061\042\057\043\067\052\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\u0121\051\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\030\047\031\060\036\053\040\064\041\061\042\057" +
    "\043\067\052\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\u0128\004\004\006\033\007\044\010\022" +
    "\012\017\015\013\016\027\020\026\021\005\022\003\023" +
    "\010\024\040\025\036\032\015\033\031\035\014\044\041" +
    "\047\021\001\001\000\046\004\205\006\033\007\044\010" +
    "\022\012\017\015\013\016\027\020\026\021\005\022\003" +
    "\023\010\024\040\025\036\032\015\033\031\035\014\044" +
    "\041\047\021\001\001\000\002\001\001\000\004\005\u012b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u0136\046\u0137\001\001\000\002\001\001\000\004" +
    "\046\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //errores
        public ArrayList<Errores> errores = new ArrayList<>();


        public String resultado = ""; 

        public void syntax_error(Symbol s)
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
                errores.add(new Errores("Error Sintactico", "   \""+ s.value +"\"   "+" Recuperado", s.left, s.right));
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
        }

        public ArrayList<Errores> getErrores(){
                return errores;
        }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= instruccion expresiones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresiones ::= printConsole 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= declararVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= asignarVariables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresiones ::= sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresiones ::= sentMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresiones ::= sentWhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresiones ::= sentFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresiones ::= sentDO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresiones ::= break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresiones ::= continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresiones ::= error PYC 
            {
              Instruccion RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresiones ::= vector1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresiones ::= vector2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresiones ::= asignacionVector 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresiones ::= decListas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresiones ::= addLista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresiones ::= decStructs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresiones ::= instStruct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoExpresion ::= INT 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.INT;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoExpresion ::= DOUBLE 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoExpresion ::= BOOL 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoExpresion ::= CHAR 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoExpresion ::= STRING 
            {
              TipoDato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=TipoDato.CADENA;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoExpresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null, tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, null, null,tipoleft, tiporight);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declararVariables ::= VARIABLE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declararVariables ::= CONSTANTE ID DOS_P tipoExpresion IGUAL A_PARENTESIS tipoExpresion C_PARENTESIS expresion PYC 
            {
              Instruccion RESULT =null;
		int mutleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mutright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String mut = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TipoDato tipo2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new DecVariables(mut.toLowerCase(), id.toLowerCase(), tipo, exp, tipo2, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignarVariables ::= ID IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignarVariables ::= ID MAS MAS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignarVariables ::= ID MENOS MENOS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignarVariables",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(exp, inst, null, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentIF ::= IF A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE elseIF 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion elseIf = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, inst, elseIf, expleft, expright);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentIF",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elseIF ::= ELSE A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Else(inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elseIF ::= ELSE sentIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentMATCH ::= MATCH expresion A_LLAVE casos C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> c = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Match(exp, c, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentMATCH",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // casos ::= caso 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new LinkedList<>(); RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // casos ::= casos caso 
            {
              LinkedList<Casos> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add((Casos)a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("casos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caso ::= expresion IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // caso ::= GUION_BAJO IGUAL MAYOR_Q A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Casos(new Dato("_", TipoDato.CADENA, instleft, instright), inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caso",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentWhile ::= WHILE A_PARENTESIS expresion C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT =  new While(exp, inst, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentWhile",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentFOR ::= FOR A_PARENTESIS asignarVariables expresion PYC updateFOR C_PARENTESIS A_LLAVE instruccion C_LLAVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new For(a, exp, b, inst,aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentFOR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // updateFOR ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AsignarVariables(id.toLowerCase(), exp, null,idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // updateFOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "++", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // updateFOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new IncDec(id.toLowerCase(), "--", idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("updateFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentDO ::= DO A_LLAVE instruccion C_LLAVE WHILE A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> inst = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(exp, inst, instleft, instright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentDO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // break ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Break(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // continue ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Continue(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("continue",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printConsole ::= PRINTLN A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println(val);RESULT= new Println(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printConsole",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // vector1 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vector1 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> exp = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=new DecArreglos(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector1",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vector2 ::= VARIABLE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vector2 ::= CONSTANTE ID DOS_P tipoExpresion A_CORCHETE C_CORCHETE A_CORCHETE C_CORCHETE IGUAL A_CORCHETE listaExpresionesVectores2 C_CORCHETE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<LinkedList<Expresion>> exp = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DecArreglos2D(id, tipo, exp, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vector2",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaExpresionesVectores ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaExpresionesVectores ::= listaExpresionesVectores COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaExpresionesVectores2 ::= A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LinkedList<>(); RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaExpresionesVectores2 ::= listaExpresionesVectores2 COMA A_CORCHETE listaExpresionesVectores C_CORCHETE 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Expresion>> a = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> val = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a; RESULT.add(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpresionesVectores2",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // accesoVector ::= ID A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoVector(id.toLowerCase(), indice, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // accesoVector2D ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AccesoArreglo2D(id.toLowerCase(), indice1, indice2, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accesoVector2D",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos(id.toLowerCase(), indice, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacionVector ::= ID A_CORCHETE expresion C_CORCHETE A_CORCHETE expresion C_CORCHETE IGUAL expresion PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int indice1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int indice1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expresion indice1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int indice2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indice2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion indice2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new AsigArreglos2D(id.toLowerCase(), indice1, indice2, val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionVector",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decListas ::= LIST MENOR_Q tipoExpresion MAYOR_Q ID IGUAL NEW LIST A_PARENTESIS C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		RESULT = new DeclaraLista(tipo, id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decListas",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // addLista ::= ID PUNTO APPEND A_PARENTESIS expresion C_PARENTESIS PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new AddLista(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addLista",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // removeLista ::= ID PUNTO REMOVE A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new RemoveElementoLista(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("removeLista",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decStructs ::= STRUCT A_LLAVE listaCampos C_LLAVE ID PYC 
            {
              Instruccion RESULT =null;
		int camposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int camposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Campo> campos = (LinkedList<Campo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new DecStruct(id.toLowerCase(), campos, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decStructs",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listaCampos ::= listaCampos campoStruct 
            {
              LinkedList<Campo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Campo> b = (LinkedList<Campo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Campo a = (Campo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCampos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listaCampos ::= campoStruct 
            {
              LinkedList<Campo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Campo a = (Campo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaCampos",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // campoStruct ::= ID DOS_P tipoExpresion PYC 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Campo(tipo, id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campoStruct",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // campoStruct ::= ID DOS_P ID PYC 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idStruct2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idStruct2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String idStruct2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CampoStruct(idStruct2.toLowerCase(), id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campoStruct",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instStruct ::= VARIABLE ID DOS_P ID IGUAL A_LLAVE valoresStruct C_LLAVE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int structIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int structIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String structId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ValorStruct> valores = (LinkedList<ValorStruct>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new InstStruct("var", id.toLowerCase(), structId.toLowerCase(), valores, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instStruct",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instStruct ::= CONSTANTE ID DOS_P ID IGUAL A_LLAVE valoresStruct C_LLAVE PYC 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int structIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int structIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String structId = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ValorStruct> valores = (LinkedList<ValorStruct>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new InstStruct("const", id.toLowerCase(), structId.toLowerCase(), valores, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instStruct",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valoresStruct ::= valoresStruct COMA valorStruct 
            {
              LinkedList<ValorStruct> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ValorStruct> b = (LinkedList<ValorStruct>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValorStruct a = (ValorStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b; RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresStruct",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valoresStruct ::= valorStruct 
            {
              LinkedList<ValorStruct> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ValorStruct a = (ValorStruct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresStruct",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valorStruct ::= ID DOS_P expresion 
            {
              ValorStruct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ValorStruct(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorStruct",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // natRound ::= ROUND A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Round(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natRound",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // natLength ::= LENGTH A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Length(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natLength",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // natToString ::= TOSTRING A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ToString(val, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natToString",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // natfind ::= ID PUNTO FIND A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Find(id.toLowerCase(), val, idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("natfind",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val, "-", null, valleft,valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "**", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "*", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion DIVIDIR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "/", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "%", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "+", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Aritmeticas(val1, "-", val2, val2left,val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "==", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "!=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion MENOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, "<=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion MAYOR_Q expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Relacionales(val1, val2, ">=", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val, null, "!", valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "^", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "||", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion val1 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion val2 = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Logicos(val1, val2, "&&", val2left, val2right);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= A_PARENTESIS expresion C_PARENTESIS 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.INT, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.DOUBLE, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= BOOLEANO 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.BOOLEAN, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CADENA, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= CARACTER 
            {
              Expresion RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Dato(val, TipoDato.CHAR, valleft, valright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new RecVariable(id.toLowerCase(), idleft, idright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= A_PARENTESIS tipoExpresion C_PARENTESIS expresion 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato tipo = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Casteo(exp, tipo, expleft, expright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= accesoVector2D 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= removeLista 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= natRound 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= natLength 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= natfind 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= natToString 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
